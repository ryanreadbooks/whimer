// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/comment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommentService_AddComment_FullMethodName                = "/comment.api.v1.CommentService/AddComment"
	CommentService_DelComment_FullMethodName                = "/comment.api.v1.CommentService/DelComment"
	CommentService_LikeAction_FullMethodName                = "/comment.api.v1.CommentService/LikeAction"
	CommentService_DislikeAction_FullMethodName             = "/comment.api.v1.CommentService/DislikeAction"
	CommentService_ReportComment_FullMethodName             = "/comment.api.v1.CommentService/ReportComment"
	CommentService_PinComment_FullMethodName                = "/comment.api.v1.CommentService/PinComment"
	CommentService_PageGetComment_FullMethodName            = "/comment.api.v1.CommentService/PageGetComment"
	CommentService_PageGetSubComment_FullMethodName         = "/comment.api.v1.CommentService/PageGetSubComment"
	CommentService_PageGetSubCommentV2_FullMethodName       = "/comment.api.v1.CommentService/PageGetSubCommentV2"
	CommentService_PageGetDetailedComment_FullMethodName    = "/comment.api.v1.CommentService/PageGetDetailedComment"
	CommentService_PageGetDetailedCommentV2_FullMethodName  = "/comment.api.v1.CommentService/PageGetDetailedCommentV2"
	CommentService_GetPinnedComment_FullMethodName          = "/comment.api.v1.CommentService/GetPinnedComment"
	CommentService_CountComment_FullMethodName              = "/comment.api.v1.CommentService/CountComment"
	CommentService_BatchCountComment_FullMethodName         = "/comment.api.v1.CommentService/BatchCountComment"
	CommentService_GetCommentLikeCount_FullMethodName       = "/comment.api.v1.CommentService/GetCommentLikeCount"
	CommentService_GetCommentDislikeCount_FullMethodName    = "/comment.api.v1.CommentService/GetCommentDislikeCount"
	CommentService_CheckUserOnObject_FullMethodName         = "/comment.api.v1.CommentService/CheckUserOnObject"
	CommentService_BatchCheckUserOnObject_FullMethodName    = "/comment.api.v1.CommentService/BatchCheckUserOnObject"
	CommentService_BatchCheckUserLikeComment_FullMethodName = "/comment.api.v1.CommentService/BatchCheckUserLikeComment"
	CommentService_UploadCommentImages_FullMethodName       = "/comment.api.v1.CommentService/UploadCommentImages"
)

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	// 发表评论
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	// 删除评论
	DelComment(ctx context.Context, in *DelCommentRequest, opts ...grpc.CallOption) (*DelCommentResponse, error)
	// 赞
	LikeAction(ctx context.Context, in *LikeActionRequest, opts ...grpc.CallOption) (*LikeActionResponse, error)
	// 踩
	DislikeAction(ctx context.Context, in *DislikeActionRequest, opts ...grpc.CallOption) (*DislikeActionResponse, error)
	// 举报
	ReportComment(ctx context.Context, in *ReportCommentRequest, opts ...grpc.CallOption) (*ReportCommentResponse, error)
	// 置顶评论
	PinComment(ctx context.Context, in *PinCommentRequest, opts ...grpc.CallOption) (*PinCommentResponse, error)
	// 获取主评论信息
	PageGetComment(ctx context.Context, in *PageGetCommentRequest, opts ...grpc.CallOption) (*PageGetCommentResponse, error)
	// 获取子评论信息
	PageGetSubComment(ctx context.Context, in *PageGetSubCommentRequest, opts ...grpc.CallOption) (*PageGetSubCommentResponse, error)
	// 分页获取子评论信息
	PageGetSubCommentV2(ctx context.Context, in *PageGetSubCommentV2Request, opts ...grpc.CallOption) (*PageGetSubCommentV2Response, error)
	// 获取主评论详细信息
	PageGetDetailedComment(ctx context.Context, in *PageGetDetailedCommentRequest, opts ...grpc.CallOption) (*PageGetDetailedCommentResponse, error)
	PageGetDetailedCommentV2(ctx context.Context, in *PageGetDetailedCommentV2Request, opts ...grpc.CallOption) (*PageGetDetailedCommentV2Response, error)
	// 获取置顶评论
	GetPinnedComment(ctx context.Context, in *GetPinnedCommentRequest, opts ...grpc.CallOption) (*GetPinnedCommentResponse, error)
	// 获取某个被评对象的评论数
	CountComment(ctx context.Context, in *CountCommentRequest, opts ...grpc.CallOption) (*CountCommentResponse, error)
	// 获取多个被评论对象的评论数
	BatchCountComment(ctx context.Context, in *BatchCountCommentRequest, opts ...grpc.CallOption) (*BatchCountCommentResponse, error)
	// 获取某条评论的点赞数
	GetCommentLikeCount(ctx context.Context, in *GetCommentLikeCountRequest, opts ...grpc.CallOption) (*GetCommentLikeCountResponse, error)
	// 获取某条评论的点踩数
	GetCommentDislikeCount(ctx context.Context, in *GetCommentDislikeCountRequest, opts ...grpc.CallOption) (*GetCommentDislikeCountResponse, error)
	// 获取某个用户是否评论了某个对象
	CheckUserOnObject(ctx context.Context, in *CheckUserOnObjectRequest, opts ...grpc.CallOption) (*CheckUserOnObjectResponse, error)
	BatchCheckUserOnObject(ctx context.Context, in *BatchCheckUserOnObjectRequest, opts ...grpc.CallOption) (*BatchCheckUserOnObjectResponse, error)
	// 批量检查某个用户是否点赞了某些评论
	BatchCheckUserLikeComment(ctx context.Context, in *BatchCheckUserLikeCommentRequest, opts ...grpc.CallOption) (*BatchCheckUserLikeCommentResponse, error)
	// 上传图片评论（申请上传凭证）
	UploadCommentImages(ctx context.Context, in *UploadCommentImagesRequest, opts ...grpc.CallOption) (*UploadCommentImagesResponse, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_AddComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DelComment(ctx context.Context, in *DelCommentRequest, opts ...grpc.CallOption) (*DelCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_DelComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) LikeAction(ctx context.Context, in *LikeActionRequest, opts ...grpc.CallOption) (*LikeActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeActionResponse)
	err := c.cc.Invoke(ctx, CommentService_LikeAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DislikeAction(ctx context.Context, in *DislikeActionRequest, opts ...grpc.CallOption) (*DislikeActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DislikeActionResponse)
	err := c.cc.Invoke(ctx, CommentService_DislikeAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ReportComment(ctx context.Context, in *ReportCommentRequest, opts ...grpc.CallOption) (*ReportCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_ReportComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) PinComment(ctx context.Context, in *PinCommentRequest, opts ...grpc.CallOption) (*PinCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_PinComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) PageGetComment(ctx context.Context, in *PageGetCommentRequest, opts ...grpc.CallOption) (*PageGetCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageGetCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_PageGetComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) PageGetSubComment(ctx context.Context, in *PageGetSubCommentRequest, opts ...grpc.CallOption) (*PageGetSubCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageGetSubCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_PageGetSubComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) PageGetSubCommentV2(ctx context.Context, in *PageGetSubCommentV2Request, opts ...grpc.CallOption) (*PageGetSubCommentV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageGetSubCommentV2Response)
	err := c.cc.Invoke(ctx, CommentService_PageGetSubCommentV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) PageGetDetailedComment(ctx context.Context, in *PageGetDetailedCommentRequest, opts ...grpc.CallOption) (*PageGetDetailedCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageGetDetailedCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_PageGetDetailedComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) PageGetDetailedCommentV2(ctx context.Context, in *PageGetDetailedCommentV2Request, opts ...grpc.CallOption) (*PageGetDetailedCommentV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageGetDetailedCommentV2Response)
	err := c.cc.Invoke(ctx, CommentService_PageGetDetailedCommentV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetPinnedComment(ctx context.Context, in *GetPinnedCommentRequest, opts ...grpc.CallOption) (*GetPinnedCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPinnedCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_GetPinnedComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) CountComment(ctx context.Context, in *CountCommentRequest, opts ...grpc.CallOption) (*CountCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_CountComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) BatchCountComment(ctx context.Context, in *BatchCountCommentRequest, opts ...grpc.CallOption) (*BatchCountCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCountCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_BatchCountComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetCommentLikeCount(ctx context.Context, in *GetCommentLikeCountRequest, opts ...grpc.CallOption) (*GetCommentLikeCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentLikeCountResponse)
	err := c.cc.Invoke(ctx, CommentService_GetCommentLikeCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetCommentDislikeCount(ctx context.Context, in *GetCommentDislikeCountRequest, opts ...grpc.CallOption) (*GetCommentDislikeCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentDislikeCountResponse)
	err := c.cc.Invoke(ctx, CommentService_GetCommentDislikeCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) CheckUserOnObject(ctx context.Context, in *CheckUserOnObjectRequest, opts ...grpc.CallOption) (*CheckUserOnObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserOnObjectResponse)
	err := c.cc.Invoke(ctx, CommentService_CheckUserOnObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) BatchCheckUserOnObject(ctx context.Context, in *BatchCheckUserOnObjectRequest, opts ...grpc.CallOption) (*BatchCheckUserOnObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCheckUserOnObjectResponse)
	err := c.cc.Invoke(ctx, CommentService_BatchCheckUserOnObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) BatchCheckUserLikeComment(ctx context.Context, in *BatchCheckUserLikeCommentRequest, opts ...grpc.CallOption) (*BatchCheckUserLikeCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCheckUserLikeCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_BatchCheckUserLikeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) UploadCommentImages(ctx context.Context, in *UploadCommentImagesRequest, opts ...grpc.CallOption) (*UploadCommentImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadCommentImagesResponse)
	err := c.cc.Invoke(ctx, CommentService_UploadCommentImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility.
type CommentServiceServer interface {
	// 发表评论
	AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	// 删除评论
	DelComment(context.Context, *DelCommentRequest) (*DelCommentResponse, error)
	// 赞
	LikeAction(context.Context, *LikeActionRequest) (*LikeActionResponse, error)
	// 踩
	DislikeAction(context.Context, *DislikeActionRequest) (*DislikeActionResponse, error)
	// 举报
	ReportComment(context.Context, *ReportCommentRequest) (*ReportCommentResponse, error)
	// 置顶评论
	PinComment(context.Context, *PinCommentRequest) (*PinCommentResponse, error)
	// 获取主评论信息
	PageGetComment(context.Context, *PageGetCommentRequest) (*PageGetCommentResponse, error)
	// 获取子评论信息
	PageGetSubComment(context.Context, *PageGetSubCommentRequest) (*PageGetSubCommentResponse, error)
	// 分页获取子评论信息
	PageGetSubCommentV2(context.Context, *PageGetSubCommentV2Request) (*PageGetSubCommentV2Response, error)
	// 获取主评论详细信息
	PageGetDetailedComment(context.Context, *PageGetDetailedCommentRequest) (*PageGetDetailedCommentResponse, error)
	PageGetDetailedCommentV2(context.Context, *PageGetDetailedCommentV2Request) (*PageGetDetailedCommentV2Response, error)
	// 获取置顶评论
	GetPinnedComment(context.Context, *GetPinnedCommentRequest) (*GetPinnedCommentResponse, error)
	// 获取某个被评对象的评论数
	CountComment(context.Context, *CountCommentRequest) (*CountCommentResponse, error)
	// 获取多个被评论对象的评论数
	BatchCountComment(context.Context, *BatchCountCommentRequest) (*BatchCountCommentResponse, error)
	// 获取某条评论的点赞数
	GetCommentLikeCount(context.Context, *GetCommentLikeCountRequest) (*GetCommentLikeCountResponse, error)
	// 获取某条评论的点踩数
	GetCommentDislikeCount(context.Context, *GetCommentDislikeCountRequest) (*GetCommentDislikeCountResponse, error)
	// 获取某个用户是否评论了某个对象
	CheckUserOnObject(context.Context, *CheckUserOnObjectRequest) (*CheckUserOnObjectResponse, error)
	BatchCheckUserOnObject(context.Context, *BatchCheckUserOnObjectRequest) (*BatchCheckUserOnObjectResponse, error)
	// 批量检查某个用户是否点赞了某些评论
	BatchCheckUserLikeComment(context.Context, *BatchCheckUserLikeCommentRequest) (*BatchCheckUserLikeCommentResponse, error)
	// 上传图片评论（申请上传凭证）
	UploadCommentImages(context.Context, *UploadCommentImagesRequest) (*UploadCommentImagesResponse, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommentServiceServer struct{}

func (UnimplementedCommentServiceServer) AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedCommentServiceServer) DelComment(context.Context, *DelCommentRequest) (*DelCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelComment not implemented")
}
func (UnimplementedCommentServiceServer) LikeAction(context.Context, *LikeActionRequest) (*LikeActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeAction not implemented")
}
func (UnimplementedCommentServiceServer) DislikeAction(context.Context, *DislikeActionRequest) (*DislikeActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DislikeAction not implemented")
}
func (UnimplementedCommentServiceServer) ReportComment(context.Context, *ReportCommentRequest) (*ReportCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportComment not implemented")
}
func (UnimplementedCommentServiceServer) PinComment(context.Context, *PinCommentRequest) (*PinCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinComment not implemented")
}
func (UnimplementedCommentServiceServer) PageGetComment(context.Context, *PageGetCommentRequest) (*PageGetCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageGetComment not implemented")
}
func (UnimplementedCommentServiceServer) PageGetSubComment(context.Context, *PageGetSubCommentRequest) (*PageGetSubCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageGetSubComment not implemented")
}
func (UnimplementedCommentServiceServer) PageGetSubCommentV2(context.Context, *PageGetSubCommentV2Request) (*PageGetSubCommentV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageGetSubCommentV2 not implemented")
}
func (UnimplementedCommentServiceServer) PageGetDetailedComment(context.Context, *PageGetDetailedCommentRequest) (*PageGetDetailedCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageGetDetailedComment not implemented")
}
func (UnimplementedCommentServiceServer) PageGetDetailedCommentV2(context.Context, *PageGetDetailedCommentV2Request) (*PageGetDetailedCommentV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageGetDetailedCommentV2 not implemented")
}
func (UnimplementedCommentServiceServer) GetPinnedComment(context.Context, *GetPinnedCommentRequest) (*GetPinnedCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPinnedComment not implemented")
}
func (UnimplementedCommentServiceServer) CountComment(context.Context, *CountCommentRequest) (*CountCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountComment not implemented")
}
func (UnimplementedCommentServiceServer) BatchCountComment(context.Context, *BatchCountCommentRequest) (*BatchCountCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCountComment not implemented")
}
func (UnimplementedCommentServiceServer) GetCommentLikeCount(context.Context, *GetCommentLikeCountRequest) (*GetCommentLikeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentLikeCount not implemented")
}
func (UnimplementedCommentServiceServer) GetCommentDislikeCount(context.Context, *GetCommentDislikeCountRequest) (*GetCommentDislikeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentDislikeCount not implemented")
}
func (UnimplementedCommentServiceServer) CheckUserOnObject(context.Context, *CheckUserOnObjectRequest) (*CheckUserOnObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserOnObject not implemented")
}
func (UnimplementedCommentServiceServer) BatchCheckUserOnObject(context.Context, *BatchCheckUserOnObjectRequest) (*BatchCheckUserOnObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckUserOnObject not implemented")
}
func (UnimplementedCommentServiceServer) BatchCheckUserLikeComment(context.Context, *BatchCheckUserLikeCommentRequest) (*BatchCheckUserLikeCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckUserLikeComment not implemented")
}
func (UnimplementedCommentServiceServer) UploadCommentImages(context.Context, *UploadCommentImagesRequest) (*UploadCommentImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCommentImages not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}
func (UnimplementedCommentServiceServer) testEmbeddedByValue()                        {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DelComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DelComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DelComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DelComment(ctx, req.(*DelCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_LikeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).LikeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_LikeAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).LikeAction(ctx, req.(*LikeActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DislikeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DislikeActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DislikeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DislikeAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DislikeAction(ctx, req.(*DislikeActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ReportComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ReportComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_ReportComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ReportComment(ctx, req.(*ReportCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_PinComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).PinComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_PinComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).PinComment(ctx, req.(*PinCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_PageGetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageGetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).PageGetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_PageGetComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).PageGetComment(ctx, req.(*PageGetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_PageGetSubComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageGetSubCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).PageGetSubComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_PageGetSubComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).PageGetSubComment(ctx, req.(*PageGetSubCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_PageGetSubCommentV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageGetSubCommentV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).PageGetSubCommentV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_PageGetSubCommentV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).PageGetSubCommentV2(ctx, req.(*PageGetSubCommentV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_PageGetDetailedComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageGetDetailedCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).PageGetDetailedComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_PageGetDetailedComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).PageGetDetailedComment(ctx, req.(*PageGetDetailedCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_PageGetDetailedCommentV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageGetDetailedCommentV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).PageGetDetailedCommentV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_PageGetDetailedCommentV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).PageGetDetailedCommentV2(ctx, req.(*PageGetDetailedCommentV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetPinnedComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPinnedCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetPinnedComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetPinnedComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetPinnedComment(ctx, req.(*GetPinnedCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_CountComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CountComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_CountComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CountComment(ctx, req.(*CountCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_BatchCountComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCountCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).BatchCountComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_BatchCountComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).BatchCountComment(ctx, req.(*BatchCountCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetCommentLikeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentLikeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentLikeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetCommentLikeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentLikeCount(ctx, req.(*GetCommentLikeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetCommentDislikeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentDislikeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentDislikeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetCommentDislikeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentDislikeCount(ctx, req.(*GetCommentDislikeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_CheckUserOnObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserOnObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CheckUserOnObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_CheckUserOnObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CheckUserOnObject(ctx, req.(*CheckUserOnObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_BatchCheckUserOnObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckUserOnObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).BatchCheckUserOnObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_BatchCheckUserOnObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).BatchCheckUserOnObject(ctx, req.(*BatchCheckUserOnObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_BatchCheckUserLikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckUserLikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).BatchCheckUserLikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_BatchCheckUserLikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).BatchCheckUserLikeComment(ctx, req.(*BatchCheckUserLikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_UploadCommentImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCommentImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).UploadCommentImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_UploadCommentImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).UploadCommentImages(ctx, req.(*UploadCommentImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment.api.v1.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddComment",
			Handler:    _CommentService_AddComment_Handler,
		},
		{
			MethodName: "DelComment",
			Handler:    _CommentService_DelComment_Handler,
		},
		{
			MethodName: "LikeAction",
			Handler:    _CommentService_LikeAction_Handler,
		},
		{
			MethodName: "DislikeAction",
			Handler:    _CommentService_DislikeAction_Handler,
		},
		{
			MethodName: "ReportComment",
			Handler:    _CommentService_ReportComment_Handler,
		},
		{
			MethodName: "PinComment",
			Handler:    _CommentService_PinComment_Handler,
		},
		{
			MethodName: "PageGetComment",
			Handler:    _CommentService_PageGetComment_Handler,
		},
		{
			MethodName: "PageGetSubComment",
			Handler:    _CommentService_PageGetSubComment_Handler,
		},
		{
			MethodName: "PageGetSubCommentV2",
			Handler:    _CommentService_PageGetSubCommentV2_Handler,
		},
		{
			MethodName: "PageGetDetailedComment",
			Handler:    _CommentService_PageGetDetailedComment_Handler,
		},
		{
			MethodName: "PageGetDetailedCommentV2",
			Handler:    _CommentService_PageGetDetailedCommentV2_Handler,
		},
		{
			MethodName: "GetPinnedComment",
			Handler:    _CommentService_GetPinnedComment_Handler,
		},
		{
			MethodName: "CountComment",
			Handler:    _CommentService_CountComment_Handler,
		},
		{
			MethodName: "BatchCountComment",
			Handler:    _CommentService_BatchCountComment_Handler,
		},
		{
			MethodName: "GetCommentLikeCount",
			Handler:    _CommentService_GetCommentLikeCount_Handler,
		},
		{
			MethodName: "GetCommentDislikeCount",
			Handler:    _CommentService_GetCommentDislikeCount_Handler,
		},
		{
			MethodName: "CheckUserOnObject",
			Handler:    _CommentService_CheckUserOnObject_Handler,
		},
		{
			MethodName: "BatchCheckUserOnObject",
			Handler:    _CommentService_BatchCheckUserOnObject_Handler,
		},
		{
			MethodName: "BatchCheckUserLikeComment",
			Handler:    _CommentService_BatchCheckUserLikeComment_Handler,
		},
		{
			MethodName: "UploadCommentImages",
			Handler:    _CommentService_UploadCommentImages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/comment.proto",
}
