// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: v1/comment.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommentAction int32

const (
	CommentAction_REPLY_ACTION_UNDO CommentAction = 0
	CommentAction_REPLY_ACTION_DO   CommentAction = 1
)

// Enum value maps for CommentAction.
var (
	CommentAction_name = map[int32]string{
		0: "REPLY_ACTION_UNDO",
		1: "REPLY_ACTION_DO",
	}
	CommentAction_value = map[string]int32{
		"REPLY_ACTION_UNDO": 0,
		"REPLY_ACTION_DO":   1,
	}
)

func (x CommentAction) Enum() *CommentAction {
	p := new(CommentAction)
	*p = x
	return p
}

func (x CommentAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentAction) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_comment_proto_enumTypes[0].Descriptor()
}

func (CommentAction) Type() protoreflect.EnumType {
	return &file_v1_comment_proto_enumTypes[0]
}

func (x CommentAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommentAction.Descriptor instead.
func (CommentAction) EnumDescriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{0}
}

type CommentType int32

const (
	CommentType_Text        CommentType = 0 // 纯文本
	CommentType_ImageText   CommentType = 1 // 图文
	CommentType_CustomEmoji CommentType = 2 // 自定义表情
)

// Enum value maps for CommentType.
var (
	CommentType_name = map[int32]string{
		0: "Text",
		1: "ImageText",
		2: "CustomEmoji",
	}
	CommentType_value = map[string]int32{
		"Text":        0,
		"ImageText":   1,
		"CustomEmoji": 2,
	}
)

func (x CommentType) Enum() *CommentType {
	p := new(CommentType)
	*p = x
	return p
}

func (x CommentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_comment_proto_enumTypes[1].Descriptor()
}

func (CommentType) Type() protoreflect.EnumType {
	return &file_v1_comment_proto_enumTypes[1]
}

func (x CommentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommentType.Descriptor instead.
func (CommentType) EnumDescriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{1}
}

type SortType int32

const (
	SortType_ByTime  SortType = 0 // 按照发布时间排序
	SortType_ByTrend SortType = 1 // 按照热度排序
)

// Enum value maps for SortType.
var (
	SortType_name = map[int32]string{
		0: "ByTime",
		1: "ByTrend",
	}
	SortType_value = map[string]int32{
		"ByTime":  0,
		"ByTrend": 1,
	}
)

func (x SortType) Enum() *SortType {
	p := new(SortType)
	*p = x
	return p
}

func (x SortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_comment_proto_enumTypes[2].Descriptor()
}

func (SortType) Type() protoreflect.EnumType {
	return &file_v1_comment_proto_enumTypes[2]
}

func (x SortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortType.Descriptor instead.
func (SortType) EnumDescriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{2}
}

// 发布评论
type AddCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     CommentType        `protobuf:"varint,1,opt,name=type,proto3,enum=comment.api.v1.CommentType" json:"type,omitempty"` // 评论类型 0-纯文本 1-图文
	Oid      int64              `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`                                   // 被评论对象id
	Content  string             `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                            // 评论内容
	RootId   int64              `protobuf:"varint,4,opt,name=root_id,json=rootId,proto3" json:"root_id,omitempty"`               // 根评论id
	ParentId int64              `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`         // 被回复的评论id
	ReplyUid int64              `protobuf:"varint,6,opt,name=reply_uid,json=replyUid,proto3" json:"reply_uid,omitempty"`         // 被回复的用户id
	Images   []*CommentReqImage `protobuf:"bytes,7,rep,name=images,proto3" json:"images,omitempty"`                              // 图片评论资源
}

func (x *AddCommentRequest) Reset() {
	*x = AddCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentRequest) ProtoMessage() {}

func (x *AddCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentRequest.ProtoReflect.Descriptor instead.
func (*AddCommentRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{0}
}

func (x *AddCommentRequest) GetType() CommentType {
	if x != nil {
		return x.Type
	}
	return CommentType_Text
}

func (x *AddCommentRequest) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *AddCommentRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddCommentRequest) GetRootId() int64 {
	if x != nil {
		return x.RootId
	}
	return 0
}

func (x *AddCommentRequest) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *AddCommentRequest) GetReplyUid() int64 {
	if x != nil {
		return x.ReplyUid
	}
	return 0
}

func (x *AddCommentRequest) GetImages() []*CommentReqImage {
	if x != nil {
		return x.Images
	}
	return nil
}

// 图片评论
type CommentReqImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreKey string `protobuf:"bytes,1,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	Width    uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height   uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Format   string `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *CommentReqImage) Reset() {
	*x = CommentReqImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentReqImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentReqImage) ProtoMessage() {}

func (x *CommentReqImage) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentReqImage.ProtoReflect.Descriptor instead.
func (*CommentReqImage) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{1}
}

func (x *CommentReqImage) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *CommentReqImage) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CommentReqImage) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CommentReqImage) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type AddCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId int64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"` // 评论id
}

func (x *AddCommentResponse) Reset() {
	*x = AddCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentResponse) ProtoMessage() {}

func (x *AddCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentResponse.ProtoReflect.Descriptor instead.
func (*AddCommentResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{2}
}

func (x *AddCommentResponse) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

// 删除评论
type DelCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId int64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"` // 评论id
	Oid       int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`                              // 评论对象id
}

func (x *DelCommentRequest) Reset() {
	*x = DelCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCommentRequest) ProtoMessage() {}

func (x *DelCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCommentRequest.ProtoReflect.Descriptor instead.
func (*DelCommentRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{3}
}

func (x *DelCommentRequest) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *DelCommentRequest) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type DelCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelCommentResponse) Reset() {
	*x = DelCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCommentResponse) ProtoMessage() {}

func (x *DelCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCommentResponse.ProtoReflect.Descriptor instead.
func (*DelCommentResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{4}
}

// 点赞/取消点赞
type LikeActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId int64         `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`            // 评论id
	Action    CommentAction `protobuf:"varint,2,opt,name=action,proto3,enum=comment.api.v1.CommentAction" json:"action,omitempty"` // 取消点赞还是点赞
}

func (x *LikeActionRequest) Reset() {
	*x = LikeActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeActionRequest) ProtoMessage() {}

func (x *LikeActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeActionRequest.ProtoReflect.Descriptor instead.
func (*LikeActionRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{5}
}

func (x *LikeActionRequest) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *LikeActionRequest) GetAction() CommentAction {
	if x != nil {
		return x.Action
	}
	return CommentAction_REPLY_ACTION_UNDO
}

type LikeActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LikeActionResponse) Reset() {
	*x = LikeActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeActionResponse) ProtoMessage() {}

func (x *LikeActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeActionResponse.ProtoReflect.Descriptor instead.
func (*LikeActionResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{6}
}

// 点踩/取消点踩
type DislikeActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId int64         `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`            // 评论id
	Action    CommentAction `protobuf:"varint,2,opt,name=action,proto3,enum=comment.api.v1.CommentAction" json:"action,omitempty"` // 取消点踩还是点踩
}

func (x *DislikeActionRequest) Reset() {
	*x = DislikeActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DislikeActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DislikeActionRequest) ProtoMessage() {}

func (x *DislikeActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DislikeActionRequest.ProtoReflect.Descriptor instead.
func (*DislikeActionRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{7}
}

func (x *DislikeActionRequest) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *DislikeActionRequest) GetAction() CommentAction {
	if x != nil {
		return x.Action
	}
	return CommentAction_REPLY_ACTION_UNDO
}

type DislikeActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DislikeActionResponse) Reset() {
	*x = DislikeActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DislikeActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DislikeActionResponse) ProtoMessage() {}

func (x *DislikeActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DislikeActionResponse.ProtoReflect.Descriptor instead.
func (*DislikeActionResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{8}
}

// 举报
type ReportCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportCommentRequest) Reset() {
	*x = ReportCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCommentRequest) ProtoMessage() {}

func (x *ReportCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCommentRequest.ProtoReflect.Descriptor instead.
func (*ReportCommentRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{9}
}

type ReportCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportCommentResponse) Reset() {
	*x = ReportCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCommentResponse) ProtoMessage() {}

func (x *ReportCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCommentResponse.ProtoReflect.Descriptor instead.
func (*ReportCommentResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{10}
}

// 置顶
type PinCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid       int64         `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`                              // 被评论对象id
	CommentId int64         `protobuf:"varint,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"` // 评论id
	Action    CommentAction `protobuf:"varint,3,opt,name=action,proto3,enum=comment.api.v1.CommentAction" json:"action,omitempty"`
}

func (x *PinCommentRequest) Reset() {
	*x = PinCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinCommentRequest) ProtoMessage() {}

func (x *PinCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinCommentRequest.ProtoReflect.Descriptor instead.
func (*PinCommentRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{11}
}

func (x *PinCommentRequest) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *PinCommentRequest) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *PinCommentRequest) GetAction() CommentAction {
	if x != nil {
		return x.Action
	}
	return CommentAction_REPLY_ACTION_UNDO
}

type PinCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PinCommentResponse) Reset() {
	*x = PinCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinCommentResponse) ProtoMessage() {}

func (x *PinCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinCommentResponse.ProtoReflect.Descriptor instead.
func (*PinCommentResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{12}
}

// 获取评论
type PageGetCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid    int64    `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Cursor int64    `protobuf:"varint,2,opt,name=cursor,proto3" json:"cursor,omitempty"`                                            // 起始游标
	SortBy SortType `protobuf:"varint,3,opt,name=sort_by,json=sortBy,proto3,enum=comment.api.v1.SortType" json:"sort_by,omitempty"` // 排序方式
}

func (x *PageGetCommentRequest) Reset() {
	*x = PageGetCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageGetCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageGetCommentRequest) ProtoMessage() {}

func (x *PageGetCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageGetCommentRequest.ProtoReflect.Descriptor instead.
func (*PageGetCommentRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{13}
}

func (x *PageGetCommentRequest) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *PageGetCommentRequest) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *PageGetCommentRequest) GetSortBy() SortType {
	if x != nil {
		return x.SortBy
	}
	return SortType_ByTime
}

// 评论实体
type CommentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // 评论id
	Oid       int64               `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`                                   // 被评论对象id
	Type      CommentType         `protobuf:"varint,3,opt,name=type,proto3,enum=comment.api.v1.CommentType" json:"type,omitempty"` // 评论类型
	Content   string              `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                            // 评论内容
	Uid       int64               `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`                                   // 评论发表用户uid
	RootId    int64               `protobuf:"varint,6,opt,name=root_id,json=rootId,proto3" json:"root_id,omitempty"`               // 根评论id
	ParentId  int64               `protobuf:"varint,7,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`         // 父评论id
	Ruid      int64               `protobuf:"varint,8,opt,name=ruid,proto3" json:"ruid,omitempty"`                                 // 被回复的用户id
	LikeCount int64               `protobuf:"varint,9,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`      // 点赞数
	HateCount int64               `protobuf:"varint,10,opt,name=hate_count,json=hateCount,proto3" json:"hate_count,omitempty"`     // 点踩数
	Ctime     int64               `protobuf:"varint,11,opt,name=ctime,proto3" json:"ctime,omitempty"`                              // 发布时间
	Mtime     int64               `protobuf:"varint,12,opt,name=mtime,proto3" json:"mtime,omitempty"`                              // 修改时间
	Ip        string              `protobuf:"bytes,13,opt,name=ip,proto3" json:"ip,omitempty"`                                     // 发布时ip地址
	IsPin     bool                `protobuf:"varint,14,opt,name=is_pin,json=isPin,proto3" json:"is_pin,omitempty"`                 // 是否为置顶评论
	SubsCount int64               `protobuf:"varint,15,opt,name=subs_count,json=subsCount,proto3" json:"subs_count,omitempty"`     // 子评论数
	Images    []*CommentItemImage `protobuf:"bytes,16,rep,name=images,proto3" json:"images,omitempty"`                             // 评论图片资源
}

func (x *CommentItem) Reset() {
	*x = CommentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentItem) ProtoMessage() {}

func (x *CommentItem) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentItem.ProtoReflect.Descriptor instead.
func (*CommentItem) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{14}
}

func (x *CommentItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommentItem) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *CommentItem) GetType() CommentType {
	if x != nil {
		return x.Type
	}
	return CommentType_Text
}

func (x *CommentItem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentItem) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CommentItem) GetRootId() int64 {
	if x != nil {
		return x.RootId
	}
	return 0
}

func (x *CommentItem) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CommentItem) GetRuid() int64 {
	if x != nil {
		return x.Ruid
	}
	return 0
}

func (x *CommentItem) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *CommentItem) GetHateCount() int64 {
	if x != nil {
		return x.HateCount
	}
	return 0
}

func (x *CommentItem) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *CommentItem) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *CommentItem) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CommentItem) GetIsPin() bool {
	if x != nil {
		return x.IsPin
	}
	return false
}

func (x *CommentItem) GetSubsCount() int64 {
	if x != nil {
		return x.SubsCount
	}
	return 0
}

func (x *CommentItem) GetImages() []*CommentItemImage {
	if x != nil {
		return x.Images
	}
	return nil
}

type CommentItemImageMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  uint32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	Type   string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CommentItemImageMeta) Reset() {
	*x = CommentItemImageMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentItemImageMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentItemImageMeta) ProtoMessage() {}

func (x *CommentItemImageMeta) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentItemImageMeta.ProtoReflect.Descriptor instead.
func (*CommentItemImageMeta) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{15}
}

func (x *CommentItemImageMeta) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CommentItemImageMeta) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CommentItemImageMeta) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *CommentItemImageMeta) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type CommentItemImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string                `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Meta *CommentItemImageMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *CommentItemImage) Reset() {
	*x = CommentItemImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentItemImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentItemImage) ProtoMessage() {}

func (x *CommentItemImage) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentItemImage.ProtoReflect.Descriptor instead.
func (*CommentItemImage) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{16}
}

func (x *CommentItemImage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CommentItemImage) GetMeta() *CommentItemImageMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type PageGetCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments   []*CommentItem `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`                        // 评论数据
	NextCursor int64          `protobuf:"varint,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"` // 分页获取下一次请求的游标
	HasNext    bool           `protobuf:"varint,3,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`          // 是否还有数据
}

func (x *PageGetCommentResponse) Reset() {
	*x = PageGetCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageGetCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageGetCommentResponse) ProtoMessage() {}

func (x *PageGetCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageGetCommentResponse.ProtoReflect.Descriptor instead.
func (*PageGetCommentResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{17}
}

func (x *PageGetCommentResponse) GetComments() []*CommentItem {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *PageGetCommentResponse) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *PageGetCommentResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

// 获取子评论
type PageGetSubCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid    int64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`                     // 被评论对象id
	RootId int64 `protobuf:"varint,2,opt,name=root_id,json=rootId,proto3" json:"root_id,omitempty"` // 主评论id
	Cursor int64 `protobuf:"varint,3,opt,name=cursor,proto3" json:"cursor,omitempty"`               // 起始游标
}

func (x *PageGetSubCommentRequest) Reset() {
	*x = PageGetSubCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageGetSubCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageGetSubCommentRequest) ProtoMessage() {}

func (x *PageGetSubCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageGetSubCommentRequest.ProtoReflect.Descriptor instead.
func (*PageGetSubCommentRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{18}
}

func (x *PageGetSubCommentRequest) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *PageGetSubCommentRequest) GetRootId() int64 {
	if x != nil {
		return x.RootId
	}
	return 0
}

func (x *PageGetSubCommentRequest) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type PageGetSubCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments   []*CommentItem `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	NextCursor int64          `protobuf:"varint,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasNext    bool           `protobuf:"varint,3,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
}

func (x *PageGetSubCommentResponse) Reset() {
	*x = PageGetSubCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageGetSubCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageGetSubCommentResponse) ProtoMessage() {}

func (x *PageGetSubCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageGetSubCommentResponse.ProtoReflect.Descriptor instead.
func (*PageGetSubCommentResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{19}
}

func (x *PageGetSubCommentResponse) GetComments() []*CommentItem {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *PageGetSubCommentResponse) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *PageGetSubCommentResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

type PageGetSubCommentV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid    int64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`                     // 被评论对象id
	RootId int64 `protobuf:"varint,2,opt,name=root_id,json=rootId,proto3" json:"root_id,omitempty"` // 主评论id
	Page   int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Count  int32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PageGetSubCommentV2Request) Reset() {
	*x = PageGetSubCommentV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageGetSubCommentV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageGetSubCommentV2Request) ProtoMessage() {}

func (x *PageGetSubCommentV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageGetSubCommentV2Request.ProtoReflect.Descriptor instead.
func (*PageGetSubCommentV2Request) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{20}
}

func (x *PageGetSubCommentV2Request) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *PageGetSubCommentV2Request) GetRootId() int64 {
	if x != nil {
		return x.RootId
	}
	return 0
}

func (x *PageGetSubCommentV2Request) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageGetSubCommentV2Request) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PageGetSubCommentV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments []*CommentItem `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	Total    int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PageGetSubCommentV2Response) Reset() {
	*x = PageGetSubCommentV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageGetSubCommentV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageGetSubCommentV2Response) ProtoMessage() {}

func (x *PageGetSubCommentV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageGetSubCommentV2Response.ProtoReflect.Descriptor instead.
func (*PageGetSubCommentV2Response) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{21}
}

func (x *PageGetSubCommentV2Response) GetComments() []*CommentItem {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *PageGetSubCommentV2Response) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 代表主评论的子评论信息
type DetailedSubComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*CommentItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // 子评论的信息
	NextCursor int64          `protobuf:"varint,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasNext    bool           `protobuf:"varint,3,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
}

func (x *DetailedSubComment) Reset() {
	*x = DetailedSubComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedSubComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedSubComment) ProtoMessage() {}

func (x *DetailedSubComment) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedSubComment.ProtoReflect.Descriptor instead.
func (*DetailedSubComment) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{22}
}

func (x *DetailedSubComment) GetItems() []*CommentItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *DetailedSubComment) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *DetailedSubComment) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

// 详细的主评论的详细信息，会包含子评论
type DetailedCommentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root        *CommentItem        `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`                                  // 主评论本身的信息
	SubComments *DetailedSubComment `protobuf:"bytes,2,opt,name=sub_comments,json=subComments,proto3" json:"sub_comments,omitempty"` // 子评论的信息
}

func (x *DetailedCommentItem) Reset() {
	*x = DetailedCommentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedCommentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedCommentItem) ProtoMessage() {}

func (x *DetailedCommentItem) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedCommentItem.ProtoReflect.Descriptor instead.
func (*DetailedCommentItem) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{23}
}

func (x *DetailedCommentItem) GetRoot() *CommentItem {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *DetailedCommentItem) GetSubComments() *DetailedSubComment {
	if x != nil {
		return x.SubComments
	}
	return nil
}

type PageGetDetailedCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid    int64    `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Cursor int64    `protobuf:"varint,2,opt,name=cursor,proto3" json:"cursor,omitempty"`                                            // 起始游标
	SortBy SortType `protobuf:"varint,3,opt,name=sort_by,json=sortBy,proto3,enum=comment.api.v1.SortType" json:"sort_by,omitempty"` // 排序方式
}

func (x *PageGetDetailedCommentRequest) Reset() {
	*x = PageGetDetailedCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageGetDetailedCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageGetDetailedCommentRequest) ProtoMessage() {}

func (x *PageGetDetailedCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageGetDetailedCommentRequest.ProtoReflect.Descriptor instead.
func (*PageGetDetailedCommentRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{24}
}

func (x *PageGetDetailedCommentRequest) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *PageGetDetailedCommentRequest) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *PageGetDetailedCommentRequest) GetSortBy() SortType {
	if x != nil {
		return x.SortBy
	}
	return SortType_ByTime
}

type PageGetDetailedCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments   []*DetailedCommentItem `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"` // 主评论
	NextCursor int64                  `protobuf:"varint,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasNext    bool                   `protobuf:"varint,3,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
}

func (x *PageGetDetailedCommentResponse) Reset() {
	*x = PageGetDetailedCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageGetDetailedCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageGetDetailedCommentResponse) ProtoMessage() {}

func (x *PageGetDetailedCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageGetDetailedCommentResponse.ProtoReflect.Descriptor instead.
func (*PageGetDetailedCommentResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{25}
}

func (x *PageGetDetailedCommentResponse) GetComments() []*DetailedCommentItem {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *PageGetDetailedCommentResponse) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *PageGetDetailedCommentResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

type PageGetDetailedCommentV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid    int64    `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Cursor int64    `protobuf:"varint,2,opt,name=cursor,proto3" json:"cursor,omitempty"`                                            // 起始游标
	SortBy SortType `protobuf:"varint,3,opt,name=sort_by,json=sortBy,proto3,enum=comment.api.v1.SortType" json:"sort_by,omitempty"` // 排序方式
}

func (x *PageGetDetailedCommentV2Request) Reset() {
	*x = PageGetDetailedCommentV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageGetDetailedCommentV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageGetDetailedCommentV2Request) ProtoMessage() {}

func (x *PageGetDetailedCommentV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageGetDetailedCommentV2Request.ProtoReflect.Descriptor instead.
func (*PageGetDetailedCommentV2Request) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{26}
}

func (x *PageGetDetailedCommentV2Request) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *PageGetDetailedCommentV2Request) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *PageGetDetailedCommentV2Request) GetSortBy() SortType {
	if x != nil {
		return x.SortBy
	}
	return SortType_ByTime
}

// 代表主评论的子评论信息
type DetailedSubCommentV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*CommentItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`  // 子评论的信息
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // 子评论总数量
}

func (x *DetailedSubCommentV2) Reset() {
	*x = DetailedSubCommentV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedSubCommentV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedSubCommentV2) ProtoMessage() {}

func (x *DetailedSubCommentV2) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedSubCommentV2.ProtoReflect.Descriptor instead.
func (*DetailedSubCommentV2) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{27}
}

func (x *DetailedSubCommentV2) GetItems() []*CommentItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *DetailedSubCommentV2) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 详细的主评论的详细信息，会包含子评论
type DetailedCommentItemV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root        *CommentItem          `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`                                  // 主评论本身的信息
	SubComments *DetailedSubCommentV2 `protobuf:"bytes,2,opt,name=sub_comments,json=subComments,proto3" json:"sub_comments,omitempty"` // 子评论的信息
}

func (x *DetailedCommentItemV2) Reset() {
	*x = DetailedCommentItemV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedCommentItemV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedCommentItemV2) ProtoMessage() {}

func (x *DetailedCommentItemV2) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedCommentItemV2.ProtoReflect.Descriptor instead.
func (*DetailedCommentItemV2) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{28}
}

func (x *DetailedCommentItemV2) GetRoot() *CommentItem {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *DetailedCommentItemV2) GetSubComments() *DetailedSubCommentV2 {
	if x != nil {
		return x.SubComments
	}
	return nil
}

type PageGetDetailedCommentV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootComments []*DetailedCommentItemV2 `protobuf:"bytes,1,rep,name=root_comments,json=rootComments,proto3" json:"root_comments,omitempty"` // 主评论
	NextCursor   int64                    `protobuf:"varint,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasNext      bool                     `protobuf:"varint,3,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
}

func (x *PageGetDetailedCommentV2Response) Reset() {
	*x = PageGetDetailedCommentV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageGetDetailedCommentV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageGetDetailedCommentV2Response) ProtoMessage() {}

func (x *PageGetDetailedCommentV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageGetDetailedCommentV2Response.ProtoReflect.Descriptor instead.
func (*PageGetDetailedCommentV2Response) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{29}
}

func (x *PageGetDetailedCommentV2Response) GetRootComments() []*DetailedCommentItemV2 {
	if x != nil {
		return x.RootComments
	}
	return nil
}

func (x *PageGetDetailedCommentV2Response) GetNextCursor() int64 {
	if x != nil {
		return x.NextCursor
	}
	return 0
}

func (x *PageGetDetailedCommentV2Response) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

// 获取置顶评论
type GetPinnedCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid int64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"` // 被评论对象id
}

func (x *GetPinnedCommentRequest) Reset() {
	*x = GetPinnedCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPinnedCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPinnedCommentRequest) ProtoMessage() {}

func (x *GetPinnedCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPinnedCommentRequest.ProtoReflect.Descriptor instead.
func (*GetPinnedCommentRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{30}
}

func (x *GetPinnedCommentRequest) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type GetPinnedCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *DetailedCommentItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"` // 置顶评论信息
}

func (x *GetPinnedCommentResponse) Reset() {
	*x = GetPinnedCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPinnedCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPinnedCommentResponse) ProtoMessage() {}

func (x *GetPinnedCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPinnedCommentResponse.ProtoReflect.Descriptor instead.
func (*GetPinnedCommentResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{31}
}

func (x *GetPinnedCommentResponse) GetItem() *DetailedCommentItem {
	if x != nil {
		return x.Item
	}
	return nil
}

// 获取被评论对象的评论数量
type CountCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid int64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"` // 被评论对象id
}

func (x *CountCommentRequest) Reset() {
	*x = CountCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountCommentRequest) ProtoMessage() {}

func (x *CountCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountCommentRequest.ProtoReflect.Descriptor instead.
func (*CountCommentRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{32}
}

func (x *CountCommentRequest) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type CountCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"` // 评论数量
}

func (x *CountCommentResponse) Reset() {
	*x = CountCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountCommentResponse) ProtoMessage() {}

func (x *CountCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountCommentResponse.ProtoReflect.Descriptor instead.
func (*CountCommentResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{33}
}

func (x *CountCommentResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type BatchCountCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oids []int64 `protobuf:"varint,1,rep,packed,name=oids,proto3" json:"oids,omitempty"`
}

func (x *BatchCountCommentRequest) Reset() {
	*x = BatchCountCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCountCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCountCommentRequest) ProtoMessage() {}

func (x *BatchCountCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCountCommentRequest.ProtoReflect.Descriptor instead.
func (*BatchCountCommentRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{34}
}

func (x *BatchCountCommentRequest) GetOids() []int64 {
	if x != nil {
		return x.Oids
	}
	return nil
}

type BatchCountCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numbers map[int64]int64 `protobuf:"bytes,1,rep,name=numbers,proto3" json:"numbers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BatchCountCommentResponse) Reset() {
	*x = BatchCountCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCountCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCountCommentResponse) ProtoMessage() {}

func (x *BatchCountCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCountCommentResponse.ProtoReflect.Descriptor instead.
func (*BatchCountCommentResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{35}
}

func (x *BatchCountCommentResponse) GetNumbers() map[int64]int64 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

type GetCommentLikeCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId int64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"` // 评论id
}

func (x *GetCommentLikeCountRequest) Reset() {
	*x = GetCommentLikeCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentLikeCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentLikeCountRequest) ProtoMessage() {}

func (x *GetCommentLikeCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentLikeCountRequest.ProtoReflect.Descriptor instead.
func (*GetCommentLikeCountRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{36}
}

func (x *GetCommentLikeCountRequest) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

type GetCommentLikeCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId int64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Count     int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"` // 点赞数量
}

func (x *GetCommentLikeCountResponse) Reset() {
	*x = GetCommentLikeCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentLikeCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentLikeCountResponse) ProtoMessage() {}

func (x *GetCommentLikeCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentLikeCountResponse.ProtoReflect.Descriptor instead.
func (*GetCommentLikeCountResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{37}
}

func (x *GetCommentLikeCountResponse) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *GetCommentLikeCountResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetCommentDislikeCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId int64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"` // 评论id
}

func (x *GetCommentDislikeCountRequest) Reset() {
	*x = GetCommentDislikeCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentDislikeCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentDislikeCountRequest) ProtoMessage() {}

func (x *GetCommentDislikeCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentDislikeCountRequest.ProtoReflect.Descriptor instead.
func (*GetCommentDislikeCountRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{38}
}

func (x *GetCommentDislikeCountRequest) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

type GetCommentDislikeCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId int64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Count     int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"` // 点赞数量
}

func (x *GetCommentDislikeCountResponse) Reset() {
	*x = GetCommentDislikeCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentDislikeCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentDislikeCountResponse) ProtoMessage() {}

func (x *GetCommentDislikeCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentDislikeCountResponse.ProtoReflect.Descriptor instead.
func (*GetCommentDislikeCountResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{39}
}

func (x *GetCommentDislikeCountResponse) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *GetCommentDislikeCountResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CheckUserOnObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid int64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"` // 被评论对象id
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"` // 用户id
}

func (x *CheckUserOnObjectRequest) Reset() {
	*x = CheckUserOnObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserOnObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserOnObjectRequest) ProtoMessage() {}

func (x *CheckUserOnObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserOnObjectRequest.ProtoReflect.Descriptor instead.
func (*CheckUserOnObjectRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{40}
}

func (x *CheckUserOnObjectRequest) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *CheckUserOnObjectRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type CheckUserOnObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *OidCommented `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CheckUserOnObjectResponse) Reset() {
	*x = CheckUserOnObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserOnObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserOnObjectResponse) ProtoMessage() {}

func (x *CheckUserOnObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserOnObjectResponse.ProtoReflect.Descriptor instead.
func (*CheckUserOnObjectResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{41}
}

func (x *CheckUserOnObjectResponse) GetResult() *OidCommented {
	if x != nil {
		return x.Result
	}
	return nil
}

type BatchCheckUserOnObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mappings map[int64]*BatchCheckUserOnObjectRequest_Objects `protobuf:"bytes,1,rep,name=mappings,proto3" json:"mappings,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchCheckUserOnObjectRequest) Reset() {
	*x = BatchCheckUserOnObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCheckUserOnObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckUserOnObjectRequest) ProtoMessage() {}

func (x *BatchCheckUserOnObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckUserOnObjectRequest.ProtoReflect.Descriptor instead.
func (*BatchCheckUserOnObjectRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{42}
}

func (x *BatchCheckUserOnObjectRequest) GetMappings() map[int64]*BatchCheckUserOnObjectRequest_Objects {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type OidCommented struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid       int64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Commented bool  `protobuf:"varint,2,opt,name=commented,proto3" json:"commented,omitempty"`
}

func (x *OidCommented) Reset() {
	*x = OidCommented{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OidCommented) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OidCommented) ProtoMessage() {}

func (x *OidCommented) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OidCommented.ProtoReflect.Descriptor instead.
func (*OidCommented) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{43}
}

func (x *OidCommented) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *OidCommented) GetCommented() bool {
	if x != nil {
		return x.Commented
	}
	return false
}

type OidCommentedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*OidCommented `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *OidCommentedList) Reset() {
	*x = OidCommentedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OidCommentedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OidCommentedList) ProtoMessage() {}

func (x *OidCommentedList) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OidCommentedList.ProtoReflect.Descriptor instead.
func (*OidCommentedList) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{44}
}

func (x *OidCommentedList) GetList() []*OidCommented {
	if x != nil {
		return x.List
	}
	return nil
}

type BatchCheckUserOnObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[int64]*OidCommentedList `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchCheckUserOnObjectResponse) Reset() {
	*x = BatchCheckUserOnObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCheckUserOnObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckUserOnObjectResponse) ProtoMessage() {}

func (x *BatchCheckUserOnObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckUserOnObjectResponse.ProtoReflect.Descriptor instead.
func (*BatchCheckUserOnObjectResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{45}
}

func (x *BatchCheckUserOnObjectResponse) GetResults() map[int64]*OidCommentedList {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchCheckUserLikeCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mappings map[int64]*BatchCheckUserLikeCommentRequest_CommentIdList `protobuf:"bytes,1,rep,name=mappings,proto3" json:"mappings,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchCheckUserLikeCommentRequest) Reset() {
	*x = BatchCheckUserLikeCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCheckUserLikeCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckUserLikeCommentRequest) ProtoMessage() {}

func (x *BatchCheckUserLikeCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckUserLikeCommentRequest.ProtoReflect.Descriptor instead.
func (*BatchCheckUserLikeCommentRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{46}
}

func (x *BatchCheckUserLikeCommentRequest) GetMappings() map[int64]*BatchCheckUserLikeCommentRequest_CommentIdList {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type CommentLiked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId int64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Liked     bool  `protobuf:"varint,2,opt,name=liked,proto3" json:"liked,omitempty"`
}

func (x *CommentLiked) Reset() {
	*x = CommentLiked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentLiked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentLiked) ProtoMessage() {}

func (x *CommentLiked) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentLiked.ProtoReflect.Descriptor instead.
func (*CommentLiked) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{47}
}

func (x *CommentLiked) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *CommentLiked) GetLiked() bool {
	if x != nil {
		return x.Liked
	}
	return false
}

type BatchCheckUserLikeCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[int64]*BatchCheckUserLikeCommentResponse_CommentLikedList `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchCheckUserLikeCommentResponse) Reset() {
	*x = BatchCheckUserLikeCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCheckUserLikeCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckUserLikeCommentResponse) ProtoMessage() {}

func (x *BatchCheckUserLikeCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckUserLikeCommentResponse.ProtoReflect.Descriptor instead.
func (*BatchCheckUserLikeCommentResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{48}
}

func (x *BatchCheckUserLikeCommentResponse) GetResults() map[int64]*BatchCheckUserLikeCommentResponse_CommentLikedList {
	if x != nil {
		return x.Results
	}
	return nil
}

type UploadCommentImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedCount int32 `protobuf:"varint,1,opt,name=requested_count,json=requestedCount,proto3" json:"requested_count,omitempty"`
}

func (x *UploadCommentImagesRequest) Reset() {
	*x = UploadCommentImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadCommentImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCommentImagesRequest) ProtoMessage() {}

func (x *UploadCommentImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCommentImagesRequest.ProtoReflect.Descriptor instead.
func (*UploadCommentImagesRequest) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{49}
}

func (x *UploadCommentImagesRequest) GetRequestedCount() int32 {
	if x != nil {
		return x.RequestedCount
	}
	return 0
}

type UploadCommentImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreKeys   []string `protobuf:"bytes,1,rep,name=store_keys,json=storeKeys,proto3" json:"store_keys,omitempty"`
	CurrentTime int64    `protobuf:"varint,2,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
	ExpireTime  int64    `protobuf:"varint,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	UploadAddr  string   `protobuf:"bytes,4,opt,name=upload_addr,json=uploadAddr,proto3" json:"upload_addr,omitempty"`
	Token       string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UploadCommentImagesResponse) Reset() {
	*x = UploadCommentImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadCommentImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCommentImagesResponse) ProtoMessage() {}

func (x *UploadCommentImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCommentImagesResponse.ProtoReflect.Descriptor instead.
func (*UploadCommentImagesResponse) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{50}
}

func (x *UploadCommentImagesResponse) GetStoreKeys() []string {
	if x != nil {
		return x.StoreKeys
	}
	return nil
}

func (x *UploadCommentImagesResponse) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *UploadCommentImagesResponse) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *UploadCommentImagesResponse) GetUploadAddr() string {
	if x != nil {
		return x.UploadAddr
	}
	return ""
}

func (x *UploadCommentImagesResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type BatchCheckUserOnObjectRequest_Objects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oids []int64 `protobuf:"varint,1,rep,packed,name=oids,proto3" json:"oids,omitempty"`
}

func (x *BatchCheckUserOnObjectRequest_Objects) Reset() {
	*x = BatchCheckUserOnObjectRequest_Objects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCheckUserOnObjectRequest_Objects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckUserOnObjectRequest_Objects) ProtoMessage() {}

func (x *BatchCheckUserOnObjectRequest_Objects) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckUserOnObjectRequest_Objects.ProtoReflect.Descriptor instead.
func (*BatchCheckUserOnObjectRequest_Objects) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{42, 0}
}

func (x *BatchCheckUserOnObjectRequest_Objects) GetOids() []int64 {
	if x != nil {
		return x.Oids
	}
	return nil
}

// mappings => {uid: [rid1, rid2, ..., ridN]}
type BatchCheckUserLikeCommentRequest_CommentIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *BatchCheckUserLikeCommentRequest_CommentIdList) Reset() {
	*x = BatchCheckUserLikeCommentRequest_CommentIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCheckUserLikeCommentRequest_CommentIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckUserLikeCommentRequest_CommentIdList) ProtoMessage() {}

func (x *BatchCheckUserLikeCommentRequest_CommentIdList) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckUserLikeCommentRequest_CommentIdList.ProtoReflect.Descriptor instead.
func (*BatchCheckUserLikeCommentRequest_CommentIdList) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{46, 0}
}

func (x *BatchCheckUserLikeCommentRequest_CommentIdList) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// results => {uid: [{comment_id, liked}, {comment_id, liked}, ...,
// {comment_id, liked}]}
type BatchCheckUserLikeCommentResponse_CommentLikedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CommentLiked `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *BatchCheckUserLikeCommentResponse_CommentLikedList) Reset() {
	*x = BatchCheckUserLikeCommentResponse_CommentLikedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_comment_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCheckUserLikeCommentResponse_CommentLikedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckUserLikeCommentResponse_CommentLikedList) ProtoMessage() {}

func (x *BatchCheckUserLikeCommentResponse_CommentLikedList) ProtoReflect() protoreflect.Message {
	mi := &file_v1_comment_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckUserLikeCommentResponse_CommentLikedList.ProtoReflect.Descriptor instead.
func (*BatchCheckUserLikeCommentResponse_CommentLikedList) Descriptor() ([]byte, []int) {
	return file_v1_comment_proto_rawDescGZIP(), []int{48, 0}
}

func (x *BatchCheckUserLikeCommentResponse_CommentLikedList) GetList() []*CommentLiked {
	if x != nil {
		return x.List
	}
	return nil
}

var File_v1_comment_proto protoreflect.FileDescriptor

var file_v1_comment_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xfc, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x55, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x74,
	0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x22, 0x33, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x0a, 0x11, 0x4c, 0x69, 0x6b, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x4c,
	0x69, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x75, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x6c,
	0x69, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x15, 0x50, 0x61, 0x67, 0x65,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0xc0, 0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x75, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x70, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x50, 0x69,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x14, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x10,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a,
	0x16, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x22, 0x6f, 0x0a, 0x18,
	0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x90, 0x01,
	0x0a, 0x19, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74,
	0x22, 0x83, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x22, 0x02, 0x20, 0x00, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x1b, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x1d, 0x50,
	0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02,
	0x20, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x31, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x22, 0x9d, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65,
	0x78, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x5f, 0x0a, 0x14,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x91, 0x01,
	0x0a, 0x15, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x32, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xaa, 0x01, 0x0a, 0x20, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x56, 0x32, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x22, 0x34,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x14, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x18, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x04, 0x6f, 0x69, 0x64, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x19, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x47, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x47, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20,
	0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x69, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa3, 0x02, 0x0a, 0x1d,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a,
	0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0xba, 0x48,
	0x07, 0x9a, 0x01, 0x04, 0x08, 0x01, 0x10, 0x32, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x1a, 0x29, 0x0a, 0x07, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x04, 0x6f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x0a, 0xba, 0x48, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x32, 0x52, 0x04, 0x6f, 0x69, 0x64, 0x73, 0x1a, 0x72, 0x0a,
	0x0d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3e, 0x0a, 0x0c, 0x4f, 0x69, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x22, 0x44, 0x0a, 0x10, 0x4f, 0x69, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x69, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x1a, 0x5c, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x69, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9e, 0x02, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x1a, 0x21, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x1a, 0x7b, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x43, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6c, 0x69, 0x6b, 0x65, 0x64, 0x22, 0xc3, 0x02, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x6b, 0x65, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x7e, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x58, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x1a, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2a, 0x3b, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x44, 0x4f, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x10, 0x01, 0x2a, 0x37, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x10, 0x02, 0x2a, 0x23, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x79,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x32, 0xbe, 0x10, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x44, 0x69, 0x73,
	0x6c, 0x69, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6c,
	0x69, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x50, 0x61,
	0x67, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x50,
	0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x12, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x16, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d,
	0x0a, 0x18, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x68, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x16,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xac, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42,
	0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x79, 0x61, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x77, 0x68, 0x69, 0x6d, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x43, 0x41, 0x58, 0xaa, 0x02, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5c, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x3a,
	0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_comment_proto_rawDescOnce sync.Once
	file_v1_comment_proto_rawDescData = file_v1_comment_proto_rawDesc
)

func file_v1_comment_proto_rawDescGZIP() []byte {
	file_v1_comment_proto_rawDescOnce.Do(func() {
		file_v1_comment_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_comment_proto_rawDescData)
	})
	return file_v1_comment_proto_rawDescData
}

var file_v1_comment_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_v1_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_v1_comment_proto_goTypes = []any{
	(CommentAction)(0),                            // 0: comment.api.v1.CommentAction
	(CommentType)(0),                              // 1: comment.api.v1.CommentType
	(SortType)(0),                                 // 2: comment.api.v1.SortType
	(*AddCommentRequest)(nil),                     // 3: comment.api.v1.AddCommentRequest
	(*CommentReqImage)(nil),                       // 4: comment.api.v1.CommentReqImage
	(*AddCommentResponse)(nil),                    // 5: comment.api.v1.AddCommentResponse
	(*DelCommentRequest)(nil),                     // 6: comment.api.v1.DelCommentRequest
	(*DelCommentResponse)(nil),                    // 7: comment.api.v1.DelCommentResponse
	(*LikeActionRequest)(nil),                     // 8: comment.api.v1.LikeActionRequest
	(*LikeActionResponse)(nil),                    // 9: comment.api.v1.LikeActionResponse
	(*DislikeActionRequest)(nil),                  // 10: comment.api.v1.DislikeActionRequest
	(*DislikeActionResponse)(nil),                 // 11: comment.api.v1.DislikeActionResponse
	(*ReportCommentRequest)(nil),                  // 12: comment.api.v1.ReportCommentRequest
	(*ReportCommentResponse)(nil),                 // 13: comment.api.v1.ReportCommentResponse
	(*PinCommentRequest)(nil),                     // 14: comment.api.v1.PinCommentRequest
	(*PinCommentResponse)(nil),                    // 15: comment.api.v1.PinCommentResponse
	(*PageGetCommentRequest)(nil),                 // 16: comment.api.v1.PageGetCommentRequest
	(*CommentItem)(nil),                           // 17: comment.api.v1.CommentItem
	(*CommentItemImageMeta)(nil),                  // 18: comment.api.v1.CommentItemImageMeta
	(*CommentItemImage)(nil),                      // 19: comment.api.v1.CommentItemImage
	(*PageGetCommentResponse)(nil),                // 20: comment.api.v1.PageGetCommentResponse
	(*PageGetSubCommentRequest)(nil),              // 21: comment.api.v1.PageGetSubCommentRequest
	(*PageGetSubCommentResponse)(nil),             // 22: comment.api.v1.PageGetSubCommentResponse
	(*PageGetSubCommentV2Request)(nil),            // 23: comment.api.v1.PageGetSubCommentV2Request
	(*PageGetSubCommentV2Response)(nil),           // 24: comment.api.v1.PageGetSubCommentV2Response
	(*DetailedSubComment)(nil),                    // 25: comment.api.v1.DetailedSubComment
	(*DetailedCommentItem)(nil),                   // 26: comment.api.v1.DetailedCommentItem
	(*PageGetDetailedCommentRequest)(nil),         // 27: comment.api.v1.PageGetDetailedCommentRequest
	(*PageGetDetailedCommentResponse)(nil),        // 28: comment.api.v1.PageGetDetailedCommentResponse
	(*PageGetDetailedCommentV2Request)(nil),       // 29: comment.api.v1.PageGetDetailedCommentV2Request
	(*DetailedSubCommentV2)(nil),                  // 30: comment.api.v1.DetailedSubCommentV2
	(*DetailedCommentItemV2)(nil),                 // 31: comment.api.v1.DetailedCommentItemV2
	(*PageGetDetailedCommentV2Response)(nil),      // 32: comment.api.v1.PageGetDetailedCommentV2Response
	(*GetPinnedCommentRequest)(nil),               // 33: comment.api.v1.GetPinnedCommentRequest
	(*GetPinnedCommentResponse)(nil),              // 34: comment.api.v1.GetPinnedCommentResponse
	(*CountCommentRequest)(nil),                   // 35: comment.api.v1.CountCommentRequest
	(*CountCommentResponse)(nil),                  // 36: comment.api.v1.CountCommentResponse
	(*BatchCountCommentRequest)(nil),              // 37: comment.api.v1.BatchCountCommentRequest
	(*BatchCountCommentResponse)(nil),             // 38: comment.api.v1.BatchCountCommentResponse
	(*GetCommentLikeCountRequest)(nil),            // 39: comment.api.v1.GetCommentLikeCountRequest
	(*GetCommentLikeCountResponse)(nil),           // 40: comment.api.v1.GetCommentLikeCountResponse
	(*GetCommentDislikeCountRequest)(nil),         // 41: comment.api.v1.GetCommentDislikeCountRequest
	(*GetCommentDislikeCountResponse)(nil),        // 42: comment.api.v1.GetCommentDislikeCountResponse
	(*CheckUserOnObjectRequest)(nil),              // 43: comment.api.v1.CheckUserOnObjectRequest
	(*CheckUserOnObjectResponse)(nil),             // 44: comment.api.v1.CheckUserOnObjectResponse
	(*BatchCheckUserOnObjectRequest)(nil),         // 45: comment.api.v1.BatchCheckUserOnObjectRequest
	(*OidCommented)(nil),                          // 46: comment.api.v1.OidCommented
	(*OidCommentedList)(nil),                      // 47: comment.api.v1.OidCommentedList
	(*BatchCheckUserOnObjectResponse)(nil),        // 48: comment.api.v1.BatchCheckUserOnObjectResponse
	(*BatchCheckUserLikeCommentRequest)(nil),      // 49: comment.api.v1.BatchCheckUserLikeCommentRequest
	(*CommentLiked)(nil),                          // 50: comment.api.v1.CommentLiked
	(*BatchCheckUserLikeCommentResponse)(nil),     // 51: comment.api.v1.BatchCheckUserLikeCommentResponse
	(*UploadCommentImagesRequest)(nil),            // 52: comment.api.v1.UploadCommentImagesRequest
	(*UploadCommentImagesResponse)(nil),           // 53: comment.api.v1.UploadCommentImagesResponse
	nil,                                           // 54: comment.api.v1.BatchCountCommentResponse.NumbersEntry
	(*BatchCheckUserOnObjectRequest_Objects)(nil), // 55: comment.api.v1.BatchCheckUserOnObjectRequest.Objects
	nil, // 56: comment.api.v1.BatchCheckUserOnObjectRequest.MappingsEntry
	nil, // 57: comment.api.v1.BatchCheckUserOnObjectResponse.ResultsEntry
	(*BatchCheckUserLikeCommentRequest_CommentIdList)(nil), // 58: comment.api.v1.BatchCheckUserLikeCommentRequest.CommentIdList
	nil, // 59: comment.api.v1.BatchCheckUserLikeCommentRequest.MappingsEntry
	(*BatchCheckUserLikeCommentResponse_CommentLikedList)(nil), // 60: comment.api.v1.BatchCheckUserLikeCommentResponse.CommentLikedList
	nil, // 61: comment.api.v1.BatchCheckUserLikeCommentResponse.ResultsEntry
}
var file_v1_comment_proto_depIdxs = []int32{
	1,  // 0: comment.api.v1.AddCommentRequest.type:type_name -> comment.api.v1.CommentType
	4,  // 1: comment.api.v1.AddCommentRequest.images:type_name -> comment.api.v1.CommentReqImage
	0,  // 2: comment.api.v1.LikeActionRequest.action:type_name -> comment.api.v1.CommentAction
	0,  // 3: comment.api.v1.DislikeActionRequest.action:type_name -> comment.api.v1.CommentAction
	0,  // 4: comment.api.v1.PinCommentRequest.action:type_name -> comment.api.v1.CommentAction
	2,  // 5: comment.api.v1.PageGetCommentRequest.sort_by:type_name -> comment.api.v1.SortType
	1,  // 6: comment.api.v1.CommentItem.type:type_name -> comment.api.v1.CommentType
	19, // 7: comment.api.v1.CommentItem.images:type_name -> comment.api.v1.CommentItemImage
	18, // 8: comment.api.v1.CommentItemImage.meta:type_name -> comment.api.v1.CommentItemImageMeta
	17, // 9: comment.api.v1.PageGetCommentResponse.comments:type_name -> comment.api.v1.CommentItem
	17, // 10: comment.api.v1.PageGetSubCommentResponse.comments:type_name -> comment.api.v1.CommentItem
	17, // 11: comment.api.v1.PageGetSubCommentV2Response.comments:type_name -> comment.api.v1.CommentItem
	17, // 12: comment.api.v1.DetailedSubComment.items:type_name -> comment.api.v1.CommentItem
	17, // 13: comment.api.v1.DetailedCommentItem.root:type_name -> comment.api.v1.CommentItem
	25, // 14: comment.api.v1.DetailedCommentItem.sub_comments:type_name -> comment.api.v1.DetailedSubComment
	2,  // 15: comment.api.v1.PageGetDetailedCommentRequest.sort_by:type_name -> comment.api.v1.SortType
	26, // 16: comment.api.v1.PageGetDetailedCommentResponse.comments:type_name -> comment.api.v1.DetailedCommentItem
	2,  // 17: comment.api.v1.PageGetDetailedCommentV2Request.sort_by:type_name -> comment.api.v1.SortType
	17, // 18: comment.api.v1.DetailedSubCommentV2.items:type_name -> comment.api.v1.CommentItem
	17, // 19: comment.api.v1.DetailedCommentItemV2.root:type_name -> comment.api.v1.CommentItem
	30, // 20: comment.api.v1.DetailedCommentItemV2.sub_comments:type_name -> comment.api.v1.DetailedSubCommentV2
	31, // 21: comment.api.v1.PageGetDetailedCommentV2Response.root_comments:type_name -> comment.api.v1.DetailedCommentItemV2
	26, // 22: comment.api.v1.GetPinnedCommentResponse.item:type_name -> comment.api.v1.DetailedCommentItem
	54, // 23: comment.api.v1.BatchCountCommentResponse.numbers:type_name -> comment.api.v1.BatchCountCommentResponse.NumbersEntry
	46, // 24: comment.api.v1.CheckUserOnObjectResponse.result:type_name -> comment.api.v1.OidCommented
	56, // 25: comment.api.v1.BatchCheckUserOnObjectRequest.mappings:type_name -> comment.api.v1.BatchCheckUserOnObjectRequest.MappingsEntry
	46, // 26: comment.api.v1.OidCommentedList.list:type_name -> comment.api.v1.OidCommented
	57, // 27: comment.api.v1.BatchCheckUserOnObjectResponse.results:type_name -> comment.api.v1.BatchCheckUserOnObjectResponse.ResultsEntry
	59, // 28: comment.api.v1.BatchCheckUserLikeCommentRequest.mappings:type_name -> comment.api.v1.BatchCheckUserLikeCommentRequest.MappingsEntry
	61, // 29: comment.api.v1.BatchCheckUserLikeCommentResponse.results:type_name -> comment.api.v1.BatchCheckUserLikeCommentResponse.ResultsEntry
	55, // 30: comment.api.v1.BatchCheckUserOnObjectRequest.MappingsEntry.value:type_name -> comment.api.v1.BatchCheckUserOnObjectRequest.Objects
	47, // 31: comment.api.v1.BatchCheckUserOnObjectResponse.ResultsEntry.value:type_name -> comment.api.v1.OidCommentedList
	58, // 32: comment.api.v1.BatchCheckUserLikeCommentRequest.MappingsEntry.value:type_name -> comment.api.v1.BatchCheckUserLikeCommentRequest.CommentIdList
	50, // 33: comment.api.v1.BatchCheckUserLikeCommentResponse.CommentLikedList.list:type_name -> comment.api.v1.CommentLiked
	60, // 34: comment.api.v1.BatchCheckUserLikeCommentResponse.ResultsEntry.value:type_name -> comment.api.v1.BatchCheckUserLikeCommentResponse.CommentLikedList
	3,  // 35: comment.api.v1.CommentService.AddComment:input_type -> comment.api.v1.AddCommentRequest
	6,  // 36: comment.api.v1.CommentService.DelComment:input_type -> comment.api.v1.DelCommentRequest
	8,  // 37: comment.api.v1.CommentService.LikeAction:input_type -> comment.api.v1.LikeActionRequest
	10, // 38: comment.api.v1.CommentService.DislikeAction:input_type -> comment.api.v1.DislikeActionRequest
	12, // 39: comment.api.v1.CommentService.ReportComment:input_type -> comment.api.v1.ReportCommentRequest
	14, // 40: comment.api.v1.CommentService.PinComment:input_type -> comment.api.v1.PinCommentRequest
	16, // 41: comment.api.v1.CommentService.PageGetComment:input_type -> comment.api.v1.PageGetCommentRequest
	21, // 42: comment.api.v1.CommentService.PageGetSubComment:input_type -> comment.api.v1.PageGetSubCommentRequest
	23, // 43: comment.api.v1.CommentService.PageGetSubCommentV2:input_type -> comment.api.v1.PageGetSubCommentV2Request
	27, // 44: comment.api.v1.CommentService.PageGetDetailedComment:input_type -> comment.api.v1.PageGetDetailedCommentRequest
	29, // 45: comment.api.v1.CommentService.PageGetDetailedCommentV2:input_type -> comment.api.v1.PageGetDetailedCommentV2Request
	33, // 46: comment.api.v1.CommentService.GetPinnedComment:input_type -> comment.api.v1.GetPinnedCommentRequest
	35, // 47: comment.api.v1.CommentService.CountComment:input_type -> comment.api.v1.CountCommentRequest
	37, // 48: comment.api.v1.CommentService.BatchCountComment:input_type -> comment.api.v1.BatchCountCommentRequest
	39, // 49: comment.api.v1.CommentService.GetCommentLikeCount:input_type -> comment.api.v1.GetCommentLikeCountRequest
	41, // 50: comment.api.v1.CommentService.GetCommentDislikeCount:input_type -> comment.api.v1.GetCommentDislikeCountRequest
	43, // 51: comment.api.v1.CommentService.CheckUserOnObject:input_type -> comment.api.v1.CheckUserOnObjectRequest
	45, // 52: comment.api.v1.CommentService.BatchCheckUserOnObject:input_type -> comment.api.v1.BatchCheckUserOnObjectRequest
	49, // 53: comment.api.v1.CommentService.BatchCheckUserLikeComment:input_type -> comment.api.v1.BatchCheckUserLikeCommentRequest
	52, // 54: comment.api.v1.CommentService.UploadCommentImages:input_type -> comment.api.v1.UploadCommentImagesRequest
	5,  // 55: comment.api.v1.CommentService.AddComment:output_type -> comment.api.v1.AddCommentResponse
	7,  // 56: comment.api.v1.CommentService.DelComment:output_type -> comment.api.v1.DelCommentResponse
	9,  // 57: comment.api.v1.CommentService.LikeAction:output_type -> comment.api.v1.LikeActionResponse
	11, // 58: comment.api.v1.CommentService.DislikeAction:output_type -> comment.api.v1.DislikeActionResponse
	13, // 59: comment.api.v1.CommentService.ReportComment:output_type -> comment.api.v1.ReportCommentResponse
	15, // 60: comment.api.v1.CommentService.PinComment:output_type -> comment.api.v1.PinCommentResponse
	20, // 61: comment.api.v1.CommentService.PageGetComment:output_type -> comment.api.v1.PageGetCommentResponse
	22, // 62: comment.api.v1.CommentService.PageGetSubComment:output_type -> comment.api.v1.PageGetSubCommentResponse
	24, // 63: comment.api.v1.CommentService.PageGetSubCommentV2:output_type -> comment.api.v1.PageGetSubCommentV2Response
	28, // 64: comment.api.v1.CommentService.PageGetDetailedComment:output_type -> comment.api.v1.PageGetDetailedCommentResponse
	32, // 65: comment.api.v1.CommentService.PageGetDetailedCommentV2:output_type -> comment.api.v1.PageGetDetailedCommentV2Response
	34, // 66: comment.api.v1.CommentService.GetPinnedComment:output_type -> comment.api.v1.GetPinnedCommentResponse
	36, // 67: comment.api.v1.CommentService.CountComment:output_type -> comment.api.v1.CountCommentResponse
	38, // 68: comment.api.v1.CommentService.BatchCountComment:output_type -> comment.api.v1.BatchCountCommentResponse
	40, // 69: comment.api.v1.CommentService.GetCommentLikeCount:output_type -> comment.api.v1.GetCommentLikeCountResponse
	42, // 70: comment.api.v1.CommentService.GetCommentDislikeCount:output_type -> comment.api.v1.GetCommentDislikeCountResponse
	44, // 71: comment.api.v1.CommentService.CheckUserOnObject:output_type -> comment.api.v1.CheckUserOnObjectResponse
	48, // 72: comment.api.v1.CommentService.BatchCheckUserOnObject:output_type -> comment.api.v1.BatchCheckUserOnObjectResponse
	51, // 73: comment.api.v1.CommentService.BatchCheckUserLikeComment:output_type -> comment.api.v1.BatchCheckUserLikeCommentResponse
	53, // 74: comment.api.v1.CommentService.UploadCommentImages:output_type -> comment.api.v1.UploadCommentImagesResponse
	55, // [55:75] is the sub-list for method output_type
	35, // [35:55] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_v1_comment_proto_init() }
func file_v1_comment_proto_init() {
	if File_v1_comment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_comment_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AddCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CommentReqImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AddCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DelCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DelCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*LikeActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*LikeActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DislikeActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DislikeActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ReportCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ReportCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PinCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PinCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PageGetCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CommentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CommentItemImageMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CommentItemImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*PageGetCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*PageGetSubCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*PageGetSubCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*PageGetSubCommentV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PageGetSubCommentV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*DetailedSubComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*DetailedCommentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*PageGetDetailedCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PageGetDetailedCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*PageGetDetailedCommentV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*DetailedSubCommentV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*DetailedCommentItemV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*PageGetDetailedCommentV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetPinnedCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GetPinnedCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CountCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CountCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCountCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCountCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GetCommentLikeCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*GetCommentLikeCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*GetCommentDislikeCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*GetCommentDislikeCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*CheckUserOnObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*CheckUserOnObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCheckUserOnObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*OidCommented); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*OidCommentedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCheckUserOnObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCheckUserLikeCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*CommentLiked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCheckUserLikeCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*UploadCommentImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*UploadCommentImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCheckUserOnObjectRequest_Objects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCheckUserLikeCommentRequest_CommentIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_comment_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCheckUserLikeCommentResponse_CommentLikedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_comment_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_comment_proto_goTypes,
		DependencyIndexes: file_v1_comment_proto_depIdxs,
		EnumInfos:         file_v1_comment_proto_enumTypes,
		MessageInfos:      file_v1_comment_proto_msgTypes,
	}.Build()
	File_v1_comment_proto = out.File
	file_v1_comment_proto_rawDesc = nil
	file_v1_comment_proto_goTypes = nil
	file_v1_comment_proto_depIdxs = nil
}
