// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0
// source: reply.proto

package sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplyClient is the client API for Reply service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplyClient interface {
	// 发表评论
	AddReply(ctx context.Context, in *AddReplyReq, opts ...grpc.CallOption) (*AddReplyRes, error)
	// 删除评论
	DelReply(ctx context.Context, in *DelReplyReq, opts ...grpc.CallOption) (*DelReplyRes, error)
	// 赞
	LikeAction(ctx context.Context, in *LikeActionReq, opts ...grpc.CallOption) (*LikeActionRes, error)
	// 踩
	DislikeAction(ctx context.Context, in *DislikeActionReq, opts ...grpc.CallOption) (*DislikeActionRes, error)
	// 举报
	ReportReply(ctx context.Context, in *ReportReplyReq, opts ...grpc.CallOption) (*ReportReplyRes, error)
	// 置顶评论
	PinReply(ctx context.Context, in *PinReplyReq, opts ...grpc.CallOption) (*PinReplyRes, error)
	// 获取主评论信息
	PageGetReply(ctx context.Context, in *PageGetReplyReq, opts ...grpc.CallOption) (*PageGetReplyRes, error)
	// 获取子评论信息
	PageGetSubReply(ctx context.Context, in *PageGetSubReplyReq, opts ...grpc.CallOption) (*PageGetSubReplyRes, error)
}

type replyClient struct {
	cc grpc.ClientConnInterface
}

func NewReplyClient(cc grpc.ClientConnInterface) ReplyClient {
	return &replyClient{cc}
}

func (c *replyClient) AddReply(ctx context.Context, in *AddReplyReq, opts ...grpc.CallOption) (*AddReplyRes, error) {
	out := new(AddReplyRes)
	err := c.cc.Invoke(ctx, "/comment.v1.Reply/AddReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) DelReply(ctx context.Context, in *DelReplyReq, opts ...grpc.CallOption) (*DelReplyRes, error) {
	out := new(DelReplyRes)
	err := c.cc.Invoke(ctx, "/comment.v1.Reply/DelReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) LikeAction(ctx context.Context, in *LikeActionReq, opts ...grpc.CallOption) (*LikeActionRes, error) {
	out := new(LikeActionRes)
	err := c.cc.Invoke(ctx, "/comment.v1.Reply/LikeAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) DislikeAction(ctx context.Context, in *DislikeActionReq, opts ...grpc.CallOption) (*DislikeActionRes, error) {
	out := new(DislikeActionRes)
	err := c.cc.Invoke(ctx, "/comment.v1.Reply/DislikeAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) ReportReply(ctx context.Context, in *ReportReplyReq, opts ...grpc.CallOption) (*ReportReplyRes, error) {
	out := new(ReportReplyRes)
	err := c.cc.Invoke(ctx, "/comment.v1.Reply/ReportReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) PinReply(ctx context.Context, in *PinReplyReq, opts ...grpc.CallOption) (*PinReplyRes, error) {
	out := new(PinReplyRes)
	err := c.cc.Invoke(ctx, "/comment.v1.Reply/PinReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) PageGetReply(ctx context.Context, in *PageGetReplyReq, opts ...grpc.CallOption) (*PageGetReplyRes, error) {
	out := new(PageGetReplyRes)
	err := c.cc.Invoke(ctx, "/comment.v1.Reply/PageGetReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) PageGetSubReply(ctx context.Context, in *PageGetSubReplyReq, opts ...grpc.CallOption) (*PageGetSubReplyRes, error) {
	out := new(PageGetSubReplyRes)
	err := c.cc.Invoke(ctx, "/comment.v1.Reply/PageGetSubReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplyServer is the server API for Reply service.
// All implementations must embed UnimplementedReplyServer
// for forward compatibility
type ReplyServer interface {
	// 发表评论
	AddReply(context.Context, *AddReplyReq) (*AddReplyRes, error)
	// 删除评论
	DelReply(context.Context, *DelReplyReq) (*DelReplyRes, error)
	// 赞
	LikeAction(context.Context, *LikeActionReq) (*LikeActionRes, error)
	// 踩
	DislikeAction(context.Context, *DislikeActionReq) (*DislikeActionRes, error)
	// 举报
	ReportReply(context.Context, *ReportReplyReq) (*ReportReplyRes, error)
	// 置顶评论
	PinReply(context.Context, *PinReplyReq) (*PinReplyRes, error)
	// 获取主评论信息
	PageGetReply(context.Context, *PageGetReplyReq) (*PageGetReplyRes, error)
	// 获取子评论信息
	PageGetSubReply(context.Context, *PageGetSubReplyReq) (*PageGetSubReplyRes, error)
	mustEmbedUnimplementedReplyServer()
}

// UnimplementedReplyServer must be embedded to have forward compatible implementations.
type UnimplementedReplyServer struct {
}

func (UnimplementedReplyServer) AddReply(context.Context, *AddReplyReq) (*AddReplyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReply not implemented")
}
func (UnimplementedReplyServer) DelReply(context.Context, *DelReplyReq) (*DelReplyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelReply not implemented")
}
func (UnimplementedReplyServer) LikeAction(context.Context, *LikeActionReq) (*LikeActionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeAction not implemented")
}
func (UnimplementedReplyServer) DislikeAction(context.Context, *DislikeActionReq) (*DislikeActionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DislikeAction not implemented")
}
func (UnimplementedReplyServer) ReportReply(context.Context, *ReportReplyReq) (*ReportReplyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportReply not implemented")
}
func (UnimplementedReplyServer) PinReply(context.Context, *PinReplyReq) (*PinReplyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinReply not implemented")
}
func (UnimplementedReplyServer) PageGetReply(context.Context, *PageGetReplyReq) (*PageGetReplyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageGetReply not implemented")
}
func (UnimplementedReplyServer) PageGetSubReply(context.Context, *PageGetSubReplyReq) (*PageGetSubReplyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageGetSubReply not implemented")
}
func (UnimplementedReplyServer) mustEmbedUnimplementedReplyServer() {}

// UnsafeReplyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplyServer will
// result in compilation errors.
type UnsafeReplyServer interface {
	mustEmbedUnimplementedReplyServer()
}

func RegisterReplyServer(s grpc.ServiceRegistrar, srv ReplyServer) {
	s.RegisterService(&Reply_ServiceDesc, srv)
}

func _Reply_AddReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).AddReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Reply/AddReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).AddReply(ctx, req.(*AddReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_DelReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).DelReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Reply/DelReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).DelReply(ctx, req.(*DelReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_LikeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).LikeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Reply/LikeAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).LikeAction(ctx, req.(*LikeActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_DislikeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DislikeActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).DislikeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Reply/DislikeAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).DislikeAction(ctx, req.(*DislikeActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_ReportReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).ReportReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Reply/ReportReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).ReportReply(ctx, req.(*ReportReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_PinReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).PinReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Reply/PinReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).PinReply(ctx, req.(*PinReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_PageGetReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageGetReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).PageGetReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Reply/PageGetReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).PageGetReply(ctx, req.(*PageGetReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_PageGetSubReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageGetSubReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).PageGetSubReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Reply/PageGetSubReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).PageGetSubReply(ctx, req.(*PageGetSubReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Reply_ServiceDesc is the grpc.ServiceDesc for Reply service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reply_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment.v1.Reply",
	HandlerType: (*ReplyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddReply",
			Handler:    _Reply_AddReply_Handler,
		},
		{
			MethodName: "DelReply",
			Handler:    _Reply_DelReply_Handler,
		},
		{
			MethodName: "LikeAction",
			Handler:    _Reply_LikeAction_Handler,
		},
		{
			MethodName: "DislikeAction",
			Handler:    _Reply_DislikeAction_Handler,
		},
		{
			MethodName: "ReportReply",
			Handler:    _Reply_ReportReply_Handler,
		},
		{
			MethodName: "PinReply",
			Handler:    _Reply_PinReply_Handler,
		},
		{
			MethodName: "PageGetReply",
			Handler:    _Reply_PageGetReply_Handler,
		},
		{
			MethodName: "PageGetSubReply",
			Handler:    _Reply_PageGetSubReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reply.proto",
}
