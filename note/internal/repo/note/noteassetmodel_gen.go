// Code generated by goctl. DO NOT EDIT.

package note

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	noteAssetFieldNames          = builder.RawFieldNames(&NoteAsset{})
	noteAssetRows                = strings.Join(noteAssetFieldNames, ",")
	noteAssetRowsExpectAutoSet   = strings.Join(stringx.Remove(noteAssetFieldNames, "`id`", "`=`"), ",")
	noteAssetRowsWithPlaceHolder = strings.Join(stringx.Remove(noteAssetFieldNames, "`id`", "`=`"), "=?,") + "=?"
)

type (
	noteAssetModel interface {
		Insert(ctx context.Context, data *NoteAsset) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*NoteAsset, error)
		Update(ctx context.Context, data *NoteAsset) error
		Delete(ctx context.Context, id int64) error
	}

	defaultNoteAssetModel struct {
		conn  sqlx.SqlConn
		table string
	}

	NoteAsset struct {
		Id         int64  `db:"id"`
		AssertKey  string `db:"assert_key"`  // 资源key
		AssertType int64  `db:"assert_type"` // 资源类型
		NoteId     int64  `db:"note_id"`     // 所属笔记id
		CreateAt   int64  `db:"create_at"`   // 创建时间
	}
)

func newNoteAssetModel(conn sqlx.SqlConn) *defaultNoteAssetModel {
	return &defaultNoteAssetModel{
		conn:  conn,
		table: "`note_asset`",
	}
}

func (m *defaultNoteAssetModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultNoteAssetModel) FindOne(ctx context.Context, id int64) (*NoteAsset, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", noteAssetRows, m.table)
	var resp NoteAsset
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNoteAssetModel) Insert(ctx context.Context, data *NoteAsset) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, noteAssetRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AssertKey, data.AssertType, data.NoteId, data.CreateAt)
	return ret, err
}

func (m *defaultNoteAssetModel) Update(ctx context.Context, data *NoteAsset) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, noteAssetRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AssertKey, data.AssertType, data.NoteId, data.CreateAt, data.Id)
	return err
}

func (m *defaultNoteAssetModel) tableName() string {
	return m.table
}
