// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/notefeed.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NoteFeedService_RandomGet_FullMethodName     = "/note.sdk.v1.NoteFeedService/RandomGet"
	NoteFeedService_GetNoteDetail_FullMethodName = "/note.sdk.v1.NoteFeedService/GetNoteDetail"
)

// NoteFeedServiceClient is the client API for NoteFeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// note相关非管理功能服务
type NoteFeedServiceClient interface {
	// 随机获取笔记内容
	RandomGet(ctx context.Context, in *RandomGetRequest, opts ...grpc.CallOption) (*RandomGetResponse, error)
	// 获取笔记
	GetNoteDetail(ctx context.Context, in *GetNoteDetailRequest, opts ...grpc.CallOption) (*GetNoteDetailResponse, error)
}

type noteFeedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteFeedServiceClient(cc grpc.ClientConnInterface) NoteFeedServiceClient {
	return &noteFeedServiceClient{cc}
}

func (c *noteFeedServiceClient) RandomGet(ctx context.Context, in *RandomGetRequest, opts ...grpc.CallOption) (*RandomGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RandomGetResponse)
	err := c.cc.Invoke(ctx, NoteFeedService_RandomGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFeedServiceClient) GetNoteDetail(ctx context.Context, in *GetNoteDetailRequest, opts ...grpc.CallOption) (*GetNoteDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNoteDetailResponse)
	err := c.cc.Invoke(ctx, NoteFeedService_GetNoteDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteFeedServiceServer is the server API for NoteFeedService service.
// All implementations must embed UnimplementedNoteFeedServiceServer
// for forward compatibility.
//
// note相关非管理功能服务
type NoteFeedServiceServer interface {
	// 随机获取笔记内容
	RandomGet(context.Context, *RandomGetRequest) (*RandomGetResponse, error)
	// 获取笔记
	GetNoteDetail(context.Context, *GetNoteDetailRequest) (*GetNoteDetailResponse, error)
	mustEmbedUnimplementedNoteFeedServiceServer()
}

// UnimplementedNoteFeedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNoteFeedServiceServer struct{}

func (UnimplementedNoteFeedServiceServer) RandomGet(context.Context, *RandomGetRequest) (*RandomGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomGet not implemented")
}
func (UnimplementedNoteFeedServiceServer) GetNoteDetail(context.Context, *GetNoteDetailRequest) (*GetNoteDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoteDetail not implemented")
}
func (UnimplementedNoteFeedServiceServer) mustEmbedUnimplementedNoteFeedServiceServer() {}
func (UnimplementedNoteFeedServiceServer) testEmbeddedByValue()                         {}

// UnsafeNoteFeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteFeedServiceServer will
// result in compilation errors.
type UnsafeNoteFeedServiceServer interface {
	mustEmbedUnimplementedNoteFeedServiceServer()
}

func RegisterNoteFeedServiceServer(s grpc.ServiceRegistrar, srv NoteFeedServiceServer) {
	// If the following call pancis, it indicates UnimplementedNoteFeedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NoteFeedService_ServiceDesc, srv)
}

func _NoteFeedService_RandomGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFeedServiceServer).RandomGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteFeedService_RandomGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFeedServiceServer).RandomGet(ctx, req.(*RandomGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFeedService_GetNoteDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFeedServiceServer).GetNoteDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteFeedService_GetNoteDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFeedServiceServer).GetNoteDetail(ctx, req.(*GetNoteDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NoteFeedService_ServiceDesc is the grpc.ServiceDesc for NoteFeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoteFeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "note.sdk.v1.NoteFeedService",
	HandlerType: (*NoteFeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RandomGet",
			Handler:    _NoteFeedService_RandomGet_Handler,
		},
		{
			MethodName: "GetNoteDetail",
			Handler:    _NoteFeedService_GetNoteDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/notefeed.proto",
}
