// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/noteinteract.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NoteInteractService_LikeNote_FullMethodName     = "/note.sdk.v1.NoteInteractService/LikeNote"
	NoteInteractService_GetNoteLikes_FullMethodName = "/note.sdk.v1.NoteInteractService/GetNoteLikes"
)

// NoteInteractServiceClient is the client API for NoteInteractService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 与笔记交互逻辑相关服务，比如点赞、收藏等
type NoteInteractServiceClient interface {
	// 点赞笔记/取消点赞
	LikeNote(ctx context.Context, in *LikeNoteRequest, opts ...grpc.CallOption) (*LikeNoteResponse, error)
	// 获取笔记点赞数量
	GetNoteLikes(ctx context.Context, in *GetNoteLikesRequest, opts ...grpc.CallOption) (*GetNoteLikesResponse, error)
}

type noteInteractServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteInteractServiceClient(cc grpc.ClientConnInterface) NoteInteractServiceClient {
	return &noteInteractServiceClient{cc}
}

func (c *noteInteractServiceClient) LikeNote(ctx context.Context, in *LikeNoteRequest, opts ...grpc.CallOption) (*LikeNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeNoteResponse)
	err := c.cc.Invoke(ctx, NoteInteractService_LikeNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteInteractServiceClient) GetNoteLikes(ctx context.Context, in *GetNoteLikesRequest, opts ...grpc.CallOption) (*GetNoteLikesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNoteLikesResponse)
	err := c.cc.Invoke(ctx, NoteInteractService_GetNoteLikes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteInteractServiceServer is the server API for NoteInteractService service.
// All implementations must embed UnimplementedNoteInteractServiceServer
// for forward compatibility.
//
// 与笔记交互逻辑相关服务，比如点赞、收藏等
type NoteInteractServiceServer interface {
	// 点赞笔记/取消点赞
	LikeNote(context.Context, *LikeNoteRequest) (*LikeNoteResponse, error)
	// 获取笔记点赞数量
	GetNoteLikes(context.Context, *GetNoteLikesRequest) (*GetNoteLikesResponse, error)
	mustEmbedUnimplementedNoteInteractServiceServer()
}

// UnimplementedNoteInteractServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNoteInteractServiceServer struct{}

func (UnimplementedNoteInteractServiceServer) LikeNote(context.Context, *LikeNoteRequest) (*LikeNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeNote not implemented")
}
func (UnimplementedNoteInteractServiceServer) GetNoteLikes(context.Context, *GetNoteLikesRequest) (*GetNoteLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoteLikes not implemented")
}
func (UnimplementedNoteInteractServiceServer) mustEmbedUnimplementedNoteInteractServiceServer() {}
func (UnimplementedNoteInteractServiceServer) testEmbeddedByValue()                             {}

// UnsafeNoteInteractServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteInteractServiceServer will
// result in compilation errors.
type UnsafeNoteInteractServiceServer interface {
	mustEmbedUnimplementedNoteInteractServiceServer()
}

func RegisterNoteInteractServiceServer(s grpc.ServiceRegistrar, srv NoteInteractServiceServer) {
	// If the following call pancis, it indicates UnimplementedNoteInteractServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NoteInteractService_ServiceDesc, srv)
}

func _NoteInteractService_LikeNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteInteractServiceServer).LikeNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteInteractService_LikeNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteInteractServiceServer).LikeNote(ctx, req.(*LikeNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteInteractService_GetNoteLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteInteractServiceServer).GetNoteLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteInteractService_GetNoteLikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteInteractServiceServer).GetNoteLikes(ctx, req.(*GetNoteLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NoteInteractService_ServiceDesc is the grpc.ServiceDesc for NoteInteractService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoteInteractService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "note.sdk.v1.NoteInteractService",
	HandlerType: (*NoteInteractServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LikeNote",
			Handler:    _NoteInteractService_LikeNote_Handler,
		},
		{
			MethodName: "GetNoteLikes",
			Handler:    _NoteInteractService_GetNoteLikes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/noteinteract.proto",
}
