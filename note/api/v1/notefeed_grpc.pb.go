// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/notefeed.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NoteFeedService_RandomGet_FullMethodName         = "/note.api.v1.NoteFeedService/RandomGet"
	NoteFeedService_GetFeedNote_FullMethodName       = "/note.api.v1.NoteFeedService/GetFeedNote"
	NoteFeedService_BatchGetFeedNotes_FullMethodName = "/note.api.v1.NoteFeedService/BatchGetFeedNotes"
	NoteFeedService_RecommendGet_FullMethodName      = "/note.api.v1.NoteFeedService/RecommendGet"
	NoteFeedService_GetUserRecentPost_FullMethodName = "/note.api.v1.NoteFeedService/GetUserRecentPost"
	NoteFeedService_ListFeedByUid_FullMethodName     = "/note.api.v1.NoteFeedService/ListFeedByUid"
	NoteFeedService_GetTagInfo_FullMethodName        = "/note.api.v1.NoteFeedService/GetTagInfo"
)

// NoteFeedServiceClient is the client API for NoteFeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// note相关非管理功能服务
type NoteFeedServiceClient interface {
	// 随机获取笔记内容
	RandomGet(ctx context.Context, in *RandomGetRequest, opts ...grpc.CallOption) (*RandomGetResponse, error)
	// 获取笔记
	GetFeedNote(ctx context.Context, in *GetFeedNoteRequest, opts ...grpc.CallOption) (*GetFeedNoteResponse, error)
	// 批量获取笔记
	BatchGetFeedNotes(ctx context.Context, in *BatchGetFeedNotesRequest, opts ...grpc.CallOption) (*BatchGetFeedNotesResponse, error)
	// 按照推荐获取
	RecommendGet(ctx context.Context, in *RecommendGetRequest, opts ...grpc.CallOption) (*RecommendGetResponse, error)
	// 获取指定用户的最近的笔记内容
	GetUserRecentPost(ctx context.Context, in *GetUserRecentPostRequest, opts ...grpc.CallOption) (*GetUserRecentPostResponse, error)
	// 列出指定用户公开的笔记内容
	ListFeedByUid(ctx context.Context, in *ListFeedByUidRequest, opts ...grpc.CallOption) (*ListFeedByUidResponse, error)
	// 获取笔记标签
	GetTagInfo(ctx context.Context, in *GetTagInfoRequest, opts ...grpc.CallOption) (*GetTagInfoResponse, error)
}

type noteFeedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteFeedServiceClient(cc grpc.ClientConnInterface) NoteFeedServiceClient {
	return &noteFeedServiceClient{cc}
}

func (c *noteFeedServiceClient) RandomGet(ctx context.Context, in *RandomGetRequest, opts ...grpc.CallOption) (*RandomGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RandomGetResponse)
	err := c.cc.Invoke(ctx, NoteFeedService_RandomGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFeedServiceClient) GetFeedNote(ctx context.Context, in *GetFeedNoteRequest, opts ...grpc.CallOption) (*GetFeedNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedNoteResponse)
	err := c.cc.Invoke(ctx, NoteFeedService_GetFeedNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFeedServiceClient) BatchGetFeedNotes(ctx context.Context, in *BatchGetFeedNotesRequest, opts ...grpc.CallOption) (*BatchGetFeedNotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetFeedNotesResponse)
	err := c.cc.Invoke(ctx, NoteFeedService_BatchGetFeedNotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFeedServiceClient) RecommendGet(ctx context.Context, in *RecommendGetRequest, opts ...grpc.CallOption) (*RecommendGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecommendGetResponse)
	err := c.cc.Invoke(ctx, NoteFeedService_RecommendGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFeedServiceClient) GetUserRecentPost(ctx context.Context, in *GetUserRecentPostRequest, opts ...grpc.CallOption) (*GetUserRecentPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRecentPostResponse)
	err := c.cc.Invoke(ctx, NoteFeedService_GetUserRecentPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFeedServiceClient) ListFeedByUid(ctx context.Context, in *ListFeedByUidRequest, opts ...grpc.CallOption) (*ListFeedByUidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedByUidResponse)
	err := c.cc.Invoke(ctx, NoteFeedService_ListFeedByUid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFeedServiceClient) GetTagInfo(ctx context.Context, in *GetTagInfoRequest, opts ...grpc.CallOption) (*GetTagInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagInfoResponse)
	err := c.cc.Invoke(ctx, NoteFeedService_GetTagInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteFeedServiceServer is the server API for NoteFeedService service.
// All implementations must embed UnimplementedNoteFeedServiceServer
// for forward compatibility.
//
// note相关非管理功能服务
type NoteFeedServiceServer interface {
	// 随机获取笔记内容
	RandomGet(context.Context, *RandomGetRequest) (*RandomGetResponse, error)
	// 获取笔记
	GetFeedNote(context.Context, *GetFeedNoteRequest) (*GetFeedNoteResponse, error)
	// 批量获取笔记
	BatchGetFeedNotes(context.Context, *BatchGetFeedNotesRequest) (*BatchGetFeedNotesResponse, error)
	// 按照推荐获取
	RecommendGet(context.Context, *RecommendGetRequest) (*RecommendGetResponse, error)
	// 获取指定用户的最近的笔记内容
	GetUserRecentPost(context.Context, *GetUserRecentPostRequest) (*GetUserRecentPostResponse, error)
	// 列出指定用户公开的笔记内容
	ListFeedByUid(context.Context, *ListFeedByUidRequest) (*ListFeedByUidResponse, error)
	// 获取笔记标签
	GetTagInfo(context.Context, *GetTagInfoRequest) (*GetTagInfoResponse, error)
	mustEmbedUnimplementedNoteFeedServiceServer()
}

// UnimplementedNoteFeedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNoteFeedServiceServer struct{}

func (UnimplementedNoteFeedServiceServer) RandomGet(context.Context, *RandomGetRequest) (*RandomGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomGet not implemented")
}
func (UnimplementedNoteFeedServiceServer) GetFeedNote(context.Context, *GetFeedNoteRequest) (*GetFeedNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedNote not implemented")
}
func (UnimplementedNoteFeedServiceServer) BatchGetFeedNotes(context.Context, *BatchGetFeedNotesRequest) (*BatchGetFeedNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetFeedNotes not implemented")
}
func (UnimplementedNoteFeedServiceServer) RecommendGet(context.Context, *RecommendGetRequest) (*RecommendGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendGet not implemented")
}
func (UnimplementedNoteFeedServiceServer) GetUserRecentPost(context.Context, *GetUserRecentPostRequest) (*GetUserRecentPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRecentPost not implemented")
}
func (UnimplementedNoteFeedServiceServer) ListFeedByUid(context.Context, *ListFeedByUidRequest) (*ListFeedByUidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedByUid not implemented")
}
func (UnimplementedNoteFeedServiceServer) GetTagInfo(context.Context, *GetTagInfoRequest) (*GetTagInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagInfo not implemented")
}
func (UnimplementedNoteFeedServiceServer) mustEmbedUnimplementedNoteFeedServiceServer() {}
func (UnimplementedNoteFeedServiceServer) testEmbeddedByValue()                         {}

// UnsafeNoteFeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteFeedServiceServer will
// result in compilation errors.
type UnsafeNoteFeedServiceServer interface {
	mustEmbedUnimplementedNoteFeedServiceServer()
}

func RegisterNoteFeedServiceServer(s grpc.ServiceRegistrar, srv NoteFeedServiceServer) {
	// If the following call pancis, it indicates UnimplementedNoteFeedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NoteFeedService_ServiceDesc, srv)
}

func _NoteFeedService_RandomGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFeedServiceServer).RandomGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteFeedService_RandomGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFeedServiceServer).RandomGet(ctx, req.(*RandomGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFeedService_GetFeedNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFeedServiceServer).GetFeedNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteFeedService_GetFeedNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFeedServiceServer).GetFeedNote(ctx, req.(*GetFeedNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFeedService_BatchGetFeedNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetFeedNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFeedServiceServer).BatchGetFeedNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteFeedService_BatchGetFeedNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFeedServiceServer).BatchGetFeedNotes(ctx, req.(*BatchGetFeedNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFeedService_RecommendGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFeedServiceServer).RecommendGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteFeedService_RecommendGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFeedServiceServer).RecommendGet(ctx, req.(*RecommendGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFeedService_GetUserRecentPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRecentPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFeedServiceServer).GetUserRecentPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteFeedService_GetUserRecentPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFeedServiceServer).GetUserRecentPost(ctx, req.(*GetUserRecentPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFeedService_ListFeedByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedByUidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFeedServiceServer).ListFeedByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteFeedService_ListFeedByUid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFeedServiceServer).ListFeedByUid(ctx, req.(*ListFeedByUidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFeedService_GetTagInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFeedServiceServer).GetTagInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteFeedService_GetTagInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFeedServiceServer).GetTagInfo(ctx, req.(*GetTagInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NoteFeedService_ServiceDesc is the grpc.ServiceDesc for NoteFeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoteFeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "note.api.v1.NoteFeedService",
	HandlerType: (*NoteFeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RandomGet",
			Handler:    _NoteFeedService_RandomGet_Handler,
		},
		{
			MethodName: "GetFeedNote",
			Handler:    _NoteFeedService_GetFeedNote_Handler,
		},
		{
			MethodName: "BatchGetFeedNotes",
			Handler:    _NoteFeedService_BatchGetFeedNotes_Handler,
		},
		{
			MethodName: "RecommendGet",
			Handler:    _NoteFeedService_RecommendGet_Handler,
		},
		{
			MethodName: "GetUserRecentPost",
			Handler:    _NoteFeedService_GetUserRecentPost_Handler,
		},
		{
			MethodName: "ListFeedByUid",
			Handler:    _NoteFeedService_ListFeedByUid_Handler,
		},
		{
			MethodName: "GetTagInfo",
			Handler:    _NoteFeedService_GetTagInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/notefeed.proto",
}
