syntax = "proto3";

package note.api.v1;

import "buf/validate/validate.proto";
import "v1/note.proto";

option go_package = "github.com/ryanreadbooks/whimer/note/api/v1";

message IsUserOwnNoteRequest {
  uint64 uid = 1 [ (buf.validate.field).uint64.gt = 0 ];     // 用户id
  uint64 note_id = 2 [ (buf.validate.field).uint64.gt = 0 ]; // 笔记id
}

message IsUserOwnNoteResponse {
  uint64 uid = 1;
  bool result = 2; // 结果
}

message IsNoteExistRequest {
  uint64 note_id = 1 [ (buf.validate.field).uint64.gt = 0 ];
}

message IsNoteExistResponse { bool exist = 1; }

message CreateReqBasic {
  string title = 1;
  string desc = 2;
  int32 privacy = 3;
}

message CreateReqImage {
  string file_id = 1;
  uint32 width = 2;
  uint32 height = 3;
  string format = 4;
}

message CreateNoteRequest {
  CreateReqBasic basic = 1;
  repeated CreateReqImage images = 2;
}

message CreateNoteResponse { uint64 note_id = 1; }

message DeleteNoteRequest {
  uint64 note_id = 1 [ (buf.validate.field).uint64.gt = 0 ];
}

message DeleteNoteResponse {}

message UpdateNoteRequest {
  uint64 note_id = 1 [ (buf.validate.field).uint64.gt = 0 ];
  CreateNoteRequest note = 2;
}

message UpdateNoteResponse { uint64 note_id = 1; }

message GetNoteRequest {
  uint64 note_id = 1 [ (buf.validate.field).uint64.gt = 0 ];
}

message GetNoteResponse { NoteItem note = 1; }

message ListNoteRequest {
  uint64 cursor = 1;
  int32 count = 2;
}

message ListNoteResponse {
  repeated NoteItem items = 1;
  uint64 next_cursor = 2;
  bool has_next = 3;
}

message GetUploadAuthRequest {
  string resource = 1;
  string source = 2;
}

message BatchGetUploadAuthRequest {
  string resource = 1;
  string source = 2;
  int32 count = 3 [ (buf.validate.field).int32.gt = 0 ];
}

message UploadAuthResponseHeaders {
  string auth = 1;
  string sha256 = 2;
  string date = 3;
  string token = 4;
}

message GetUploadAuthResponse {
  string file_id = 1;
  int64 current_time = 2;
  int64 expire_time = 3;
  string upload_addr = 4;
  UploadAuthResponseHeaders headers = 5;
}

message BatchGetUploadAuthResponse {
  repeated GetUploadAuthResponse tickets = 1;
}

message GetPostedCountRequest {
  uint64 uid = 1 [ (buf.validate.field).uint64.gt = 0 ]; // 用户id
}

message GetPostedCountResponse { uint64 count = 1; }

message BatchGetUploadAuthV2Request {
  string resource = 1;
  string source = 2;
  int32 count = 3 [ (buf.validate.field).int32.gt = 0 ];
}

message BatchGetUploadAuthV2Response {
  repeated string file_ids = 1;
  int64 current_time = 2;
  int64 expire_time = 3;
  string upload_addr = 4;
  string token = 5;
}

// 和笔记管理相关的服务
// 比如发布笔记，修改笔记，删除笔记等管理笔记的功能
service NoteCreatorService {
  // 检查用户是否拥有指定的笔记
  rpc IsUserOwnNote(IsUserOwnNoteRequest) returns (IsUserOwnNoteResponse);
  // 判断笔记是否存在
  rpc IsNoteExist(IsNoteExistRequest) returns (IsNoteExistResponse);
  // 创建笔记
  rpc CreateNote(CreateNoteRequest) returns (CreateNoteResponse);
  // 更新笔记
  rpc UpdateNote(UpdateNoteRequest) returns (UpdateNoteResponse);
  // 删除笔记
  rpc DeleteNote(DeleteNoteRequest) returns (DeleteNoteResponse);
  // 获取笔记的信息
  rpc GetNote(GetNoteRequest) returns (GetNoteResponse);
  // 列出笔记
  rpc ListNote(ListNoteRequest) returns (ListNoteResponse);

  // 获取上传凭证
  // 
  // Deprecated: GetUploadAuth is deprecated, use BatchGetUploadAuthV2 instead.
  rpc GetUploadAuth(GetUploadAuthRequest) returns (GetUploadAuthResponse);

  // 批量获取上传凭证
  // 
  // Deprecated: BatchGetUploadAuth is deprecated, use BatchGetUploadAuthV2 instead.
  rpc BatchGetUploadAuth(BatchGetUploadAuthRequest)
      returns (BatchGetUploadAuthResponse);

  // 获取上传凭证v2
  rpc BatchGetUploadAuthV2(BatchGetUploadAuthV2Request)
      returns (BatchGetUploadAuthV2Response);
  // 获取用户投稿数量
  rpc GetPostedCount(GetPostedCountRequest) returns (GetPostedCountResponse);
}
