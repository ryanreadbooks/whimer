// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/document.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DocumentService_BatchAddNoteTag_FullMethodName             = "/search.api.v1.DocumentService/BatchAddNoteTag"
	DocumentService_BatchAddNote_FullMethodName                = "/search.api.v1.DocumentService/BatchAddNote"
	DocumentService_BatchDeleteNote_FullMethodName             = "/search.api.v1.DocumentService/BatchDeleteNote"
	DocumentService_BatchUpdateNoteLikeCount_FullMethodName    = "/search.api.v1.DocumentService/BatchUpdateNoteLikeCount"
	DocumentService_BatchUpdateNoteCommentCount_FullMethodName = "/search.api.v1.DocumentService/BatchUpdateNoteCommentCount"
)

// DocumentServiceClient is the client API for DocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 搜索数据写入服务
type DocumentServiceClient interface {
	// 批量写入笔记标签
	BatchAddNoteTag(ctx context.Context, in *BatchAddNoteTagRequest, opts ...grpc.CallOption) (*BatchAddNoteTagResponse, error)
	// 批量写入笔记
	BatchAddNote(ctx context.Context, in *BatchAddNoteRequest, opts ...grpc.CallOption) (*BatchAddNoteResponse, error)
	// 批量删除笔记
	BatchDeleteNote(ctx context.Context, in *BatchDeleteNoteRequest, opts ...grpc.CallOption) (*BatchDeleteNoteResponse, error)
	// 更新笔记点赞数量
	BatchUpdateNoteLikeCount(ctx context.Context, in *BatchUpdateNoteLikeCountRequest, opts ...grpc.CallOption) (*BatchUpdateNoteLikeCountResponse, error)
	// 更新笔记评论数量
	BatchUpdateNoteCommentCount(ctx context.Context, in *BatchUpdateNoteCommentCountRequest, opts ...grpc.CallOption) (*BatchUpdateNoteCommentCountResponse, error)
}

type documentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentServiceClient(cc grpc.ClientConnInterface) DocumentServiceClient {
	return &documentServiceClient{cc}
}

func (c *documentServiceClient) BatchAddNoteTag(ctx context.Context, in *BatchAddNoteTagRequest, opts ...grpc.CallOption) (*BatchAddNoteTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchAddNoteTagResponse)
	err := c.cc.Invoke(ctx, DocumentService_BatchAddNoteTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) BatchAddNote(ctx context.Context, in *BatchAddNoteRequest, opts ...grpc.CallOption) (*BatchAddNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchAddNoteResponse)
	err := c.cc.Invoke(ctx, DocumentService_BatchAddNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) BatchDeleteNote(ctx context.Context, in *BatchDeleteNoteRequest, opts ...grpc.CallOption) (*BatchDeleteNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeleteNoteResponse)
	err := c.cc.Invoke(ctx, DocumentService_BatchDeleteNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) BatchUpdateNoteLikeCount(ctx context.Context, in *BatchUpdateNoteLikeCountRequest, opts ...grpc.CallOption) (*BatchUpdateNoteLikeCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchUpdateNoteLikeCountResponse)
	err := c.cc.Invoke(ctx, DocumentService_BatchUpdateNoteLikeCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) BatchUpdateNoteCommentCount(ctx context.Context, in *BatchUpdateNoteCommentCountRequest, opts ...grpc.CallOption) (*BatchUpdateNoteCommentCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchUpdateNoteCommentCountResponse)
	err := c.cc.Invoke(ctx, DocumentService_BatchUpdateNoteCommentCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServiceServer is the server API for DocumentService service.
// All implementations must embed UnimplementedDocumentServiceServer
// for forward compatibility.
//
// 搜索数据写入服务
type DocumentServiceServer interface {
	// 批量写入笔记标签
	BatchAddNoteTag(context.Context, *BatchAddNoteTagRequest) (*BatchAddNoteTagResponse, error)
	// 批量写入笔记
	BatchAddNote(context.Context, *BatchAddNoteRequest) (*BatchAddNoteResponse, error)
	// 批量删除笔记
	BatchDeleteNote(context.Context, *BatchDeleteNoteRequest) (*BatchDeleteNoteResponse, error)
	// 更新笔记点赞数量
	BatchUpdateNoteLikeCount(context.Context, *BatchUpdateNoteLikeCountRequest) (*BatchUpdateNoteLikeCountResponse, error)
	// 更新笔记评论数量
	BatchUpdateNoteCommentCount(context.Context, *BatchUpdateNoteCommentCountRequest) (*BatchUpdateNoteCommentCountResponse, error)
	mustEmbedUnimplementedDocumentServiceServer()
}

// UnimplementedDocumentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocumentServiceServer struct{}

func (UnimplementedDocumentServiceServer) BatchAddNoteTag(context.Context, *BatchAddNoteTagRequest) (*BatchAddNoteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddNoteTag not implemented")
}
func (UnimplementedDocumentServiceServer) BatchAddNote(context.Context, *BatchAddNoteRequest) (*BatchAddNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddNote not implemented")
}
func (UnimplementedDocumentServiceServer) BatchDeleteNote(context.Context, *BatchDeleteNoteRequest) (*BatchDeleteNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteNote not implemented")
}
func (UnimplementedDocumentServiceServer) BatchUpdateNoteLikeCount(context.Context, *BatchUpdateNoteLikeCountRequest) (*BatchUpdateNoteLikeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateNoteLikeCount not implemented")
}
func (UnimplementedDocumentServiceServer) BatchUpdateNoteCommentCount(context.Context, *BatchUpdateNoteCommentCountRequest) (*BatchUpdateNoteCommentCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateNoteCommentCount not implemented")
}
func (UnimplementedDocumentServiceServer) mustEmbedUnimplementedDocumentServiceServer() {}
func (UnimplementedDocumentServiceServer) testEmbeddedByValue()                         {}

// UnsafeDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServiceServer will
// result in compilation errors.
type UnsafeDocumentServiceServer interface {
	mustEmbedUnimplementedDocumentServiceServer()
}

func RegisterDocumentServiceServer(s grpc.ServiceRegistrar, srv DocumentServiceServer) {
	// If the following call pancis, it indicates UnimplementedDocumentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DocumentService_ServiceDesc, srv)
}

func _DocumentService_BatchAddNoteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddNoteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).BatchAddNoteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_BatchAddNoteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).BatchAddNoteTag(ctx, req.(*BatchAddNoteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_BatchAddNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).BatchAddNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_BatchAddNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).BatchAddNote(ctx, req.(*BatchAddNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_BatchDeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).BatchDeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_BatchDeleteNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).BatchDeleteNote(ctx, req.(*BatchDeleteNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_BatchUpdateNoteLikeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateNoteLikeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).BatchUpdateNoteLikeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_BatchUpdateNoteLikeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).BatchUpdateNoteLikeCount(ctx, req.(*BatchUpdateNoteLikeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_BatchUpdateNoteCommentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateNoteCommentCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).BatchUpdateNoteCommentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_BatchUpdateNoteCommentCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).BatchUpdateNoteCommentCount(ctx, req.(*BatchUpdateNoteCommentCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentService_ServiceDesc is the grpc.ServiceDesc for DocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "search.api.v1.DocumentService",
	HandlerType: (*DocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchAddNoteTag",
			Handler:    _DocumentService_BatchAddNoteTag_Handler,
		},
		{
			MethodName: "BatchAddNote",
			Handler:    _DocumentService_BatchAddNote_Handler,
		},
		{
			MethodName: "BatchDeleteNote",
			Handler:    _DocumentService_BatchDeleteNote_Handler,
		},
		{
			MethodName: "BatchUpdateNoteLikeCount",
			Handler:    _DocumentService_BatchUpdateNoteLikeCount_Handler,
		},
		{
			MethodName: "BatchUpdateNoteCommentCount",
			Handler:    _DocumentService_BatchUpdateNoteCommentCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/document.proto",
}
