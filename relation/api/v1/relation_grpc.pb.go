// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/relation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RelationService_FollowUser_FullMethodName             = "/relation.api.v1.RelationService/FollowUser"
	RelationService_GetUserFanList_FullMethodName         = "/relation.api.v1.RelationService/GetUserFanList"
	RelationService_GetUserFollowingList_FullMethodName   = "/relation.api.v1.RelationService/GetUserFollowingList"
	RelationService_RemoveUserFan_FullMethodName          = "/relation.api.v1.RelationService/RemoveUserFan"
	RelationService_GetUserFanCount_FullMethodName        = "/relation.api.v1.RelationService/GetUserFanCount"
	RelationService_GetUserFollowingCount_FullMethodName  = "/relation.api.v1.RelationService/GetUserFollowingCount"
	RelationService_BatchCheckUserFollowed_FullMethodName = "/relation.api.v1.RelationService/BatchCheckUserFollowed"
	RelationService_CheckUserFollowed_FullMethodName      = "/relation.api.v1.RelationService/CheckUserFollowed"
)

// RelationServiceClient is the client API for RelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationServiceClient interface {
	// 关注/取消关注某个用户
	FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error)
	// 获取某个用户的粉丝列表
	GetUserFanList(ctx context.Context, in *GetUserFanListRequest, opts ...grpc.CallOption) (*GetUserFanListResponse, error)
	// 获取某个用户的关注列表
	GetUserFollowingList(ctx context.Context, in *GetUserFollowingListRequest, opts ...grpc.CallOption) (*GetUserFollowingListResponse, error)
	// 移除某个用户的粉丝
	RemoveUserFan(ctx context.Context, in *RemoveUserFanRequest, opts ...grpc.CallOption) (*RemoveUserFanResponse, error)
	// 获取用户的粉丝数量
	GetUserFanCount(ctx context.Context, in *GetUserFanCountRequest, opts ...grpc.CallOption) (*GetUserFanCountResponse, error)
	// 获取用户的关注数量
	GetUserFollowingCount(ctx context.Context, in *GetUserFollowingCountRequest, opts ...grpc.CallOption) (*GetUserFollowingCountResponse, error)
	// 判断某个用户是否关注了某些用户
	BatchCheckUserFollowed(ctx context.Context, in *BatchCheckUserFollowedRequest, opts ...grpc.CallOption) (*BatchCheckUserFollowedResponse, error)
	CheckUserFollowed(ctx context.Context, in *CheckUserFollowedRequest, opts ...grpc.CallOption) (*CheckUserFollowedResponse, error)
}

type relationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationServiceClient(cc grpc.ClientConnInterface) RelationServiceClient {
	return &relationServiceClient{cc}
}

func (c *relationServiceClient) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowUserResponse)
	err := c.cc.Invoke(ctx, RelationService_FollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetUserFanList(ctx context.Context, in *GetUserFanListRequest, opts ...grpc.CallOption) (*GetUserFanListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserFanListResponse)
	err := c.cc.Invoke(ctx, RelationService_GetUserFanList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetUserFollowingList(ctx context.Context, in *GetUserFollowingListRequest, opts ...grpc.CallOption) (*GetUserFollowingListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserFollowingListResponse)
	err := c.cc.Invoke(ctx, RelationService_GetUserFollowingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) RemoveUserFan(ctx context.Context, in *RemoveUserFanRequest, opts ...grpc.CallOption) (*RemoveUserFanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserFanResponse)
	err := c.cc.Invoke(ctx, RelationService_RemoveUserFan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetUserFanCount(ctx context.Context, in *GetUserFanCountRequest, opts ...grpc.CallOption) (*GetUserFanCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserFanCountResponse)
	err := c.cc.Invoke(ctx, RelationService_GetUserFanCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetUserFollowingCount(ctx context.Context, in *GetUserFollowingCountRequest, opts ...grpc.CallOption) (*GetUserFollowingCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserFollowingCountResponse)
	err := c.cc.Invoke(ctx, RelationService_GetUserFollowingCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) BatchCheckUserFollowed(ctx context.Context, in *BatchCheckUserFollowedRequest, opts ...grpc.CallOption) (*BatchCheckUserFollowedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCheckUserFollowedResponse)
	err := c.cc.Invoke(ctx, RelationService_BatchCheckUserFollowed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) CheckUserFollowed(ctx context.Context, in *CheckUserFollowedRequest, opts ...grpc.CallOption) (*CheckUserFollowedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserFollowedResponse)
	err := c.cc.Invoke(ctx, RelationService_CheckUserFollowed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServiceServer is the server API for RelationService service.
// All implementations must embed UnimplementedRelationServiceServer
// for forward compatibility.
type RelationServiceServer interface {
	// 关注/取消关注某个用户
	FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error)
	// 获取某个用户的粉丝列表
	GetUserFanList(context.Context, *GetUserFanListRequest) (*GetUserFanListResponse, error)
	// 获取某个用户的关注列表
	GetUserFollowingList(context.Context, *GetUserFollowingListRequest) (*GetUserFollowingListResponse, error)
	// 移除某个用户的粉丝
	RemoveUserFan(context.Context, *RemoveUserFanRequest) (*RemoveUserFanResponse, error)
	// 获取用户的粉丝数量
	GetUserFanCount(context.Context, *GetUserFanCountRequest) (*GetUserFanCountResponse, error)
	// 获取用户的关注数量
	GetUserFollowingCount(context.Context, *GetUserFollowingCountRequest) (*GetUserFollowingCountResponse, error)
	// 判断某个用户是否关注了某些用户
	BatchCheckUserFollowed(context.Context, *BatchCheckUserFollowedRequest) (*BatchCheckUserFollowedResponse, error)
	CheckUserFollowed(context.Context, *CheckUserFollowedRequest) (*CheckUserFollowedResponse, error)
	mustEmbedUnimplementedRelationServiceServer()
}

// UnimplementedRelationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelationServiceServer struct{}

func (UnimplementedRelationServiceServer) FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedRelationServiceServer) GetUserFanList(context.Context, *GetUserFanListRequest) (*GetUserFanListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFanList not implemented")
}
func (UnimplementedRelationServiceServer) GetUserFollowingList(context.Context, *GetUserFollowingListRequest) (*GetUserFollowingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowingList not implemented")
}
func (UnimplementedRelationServiceServer) RemoveUserFan(context.Context, *RemoveUserFanRequest) (*RemoveUserFanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFan not implemented")
}
func (UnimplementedRelationServiceServer) GetUserFanCount(context.Context, *GetUserFanCountRequest) (*GetUserFanCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFanCount not implemented")
}
func (UnimplementedRelationServiceServer) GetUserFollowingCount(context.Context, *GetUserFollowingCountRequest) (*GetUserFollowingCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowingCount not implemented")
}
func (UnimplementedRelationServiceServer) BatchCheckUserFollowed(context.Context, *BatchCheckUserFollowedRequest) (*BatchCheckUserFollowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckUserFollowed not implemented")
}
func (UnimplementedRelationServiceServer) CheckUserFollowed(context.Context, *CheckUserFollowedRequest) (*CheckUserFollowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserFollowed not implemented")
}
func (UnimplementedRelationServiceServer) mustEmbedUnimplementedRelationServiceServer() {}
func (UnimplementedRelationServiceServer) testEmbeddedByValue()                         {}

// UnsafeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServiceServer will
// result in compilation errors.
type UnsafeRelationServiceServer interface {
	mustEmbedUnimplementedRelationServiceServer()
}

func RegisterRelationServiceServer(s grpc.ServiceRegistrar, srv RelationServiceServer) {
	// If the following call pancis, it indicates UnimplementedRelationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RelationService_ServiceDesc, srv)
}

func _RelationService_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).FollowUser(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetUserFanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFanListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetUserFanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetUserFanList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetUserFanList(ctx, req.(*GetUserFanListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetUserFollowingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFollowingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetUserFollowingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetUserFollowingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetUserFollowingList(ctx, req.(*GetUserFollowingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_RemoveUserFan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).RemoveUserFan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_RemoveUserFan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).RemoveUserFan(ctx, req.(*RemoveUserFanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetUserFanCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFanCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetUserFanCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetUserFanCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetUserFanCount(ctx, req.(*GetUserFanCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetUserFollowingCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFollowingCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetUserFollowingCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetUserFollowingCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetUserFollowingCount(ctx, req.(*GetUserFollowingCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_BatchCheckUserFollowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckUserFollowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).BatchCheckUserFollowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_BatchCheckUserFollowed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).BatchCheckUserFollowed(ctx, req.(*BatchCheckUserFollowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_CheckUserFollowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserFollowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).CheckUserFollowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_CheckUserFollowed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).CheckUserFollowed(ctx, req.(*CheckUserFollowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationService_ServiceDesc is the grpc.ServiceDesc for RelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relation.api.v1.RelationService",
	HandlerType: (*RelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowUser",
			Handler:    _RelationService_FollowUser_Handler,
		},
		{
			MethodName: "GetUserFanList",
			Handler:    _RelationService_GetUserFanList_Handler,
		},
		{
			MethodName: "GetUserFollowingList",
			Handler:    _RelationService_GetUserFollowingList_Handler,
		},
		{
			MethodName: "RemoveUserFan",
			Handler:    _RelationService_RemoveUserFan_Handler,
		},
		{
			MethodName: "GetUserFanCount",
			Handler:    _RelationService_GetUserFanCount_Handler,
		},
		{
			MethodName: "GetUserFollowingCount",
			Handler:    _RelationService_GetUserFollowingCount_Handler,
		},
		{
			MethodName: "BatchCheckUserFollowed",
			Handler:    _RelationService_BatchCheckUserFollowed_Handler,
		},
		{
			MethodName: "CheckUserFollowed",
			Handler:    _RelationService_CheckUserFollowed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/relation.proto",
}
